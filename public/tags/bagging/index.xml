<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bagging | RLeripio</title>
    <link>/tags/bagging/</link>
      <atom:link href="/tags/bagging/index.xml" rel="self" type="application/rss+xml" />
    <description>bagging</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en</language><lastBuildDate>Thu, 13 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>bagging</title>
      <link>/tags/bagging/</link>
    </image>
    
    <item>
      <title>Como aprimorar previsões: uma aplicação com bootstrap</title>
      <link>/post/como-aprimorar-previsoes-uma-aplicacao-com-bootstrap/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      <guid>/post/como-aprimorar-previsoes-uma-aplicacao-com-bootstrap/</guid>
      <description>&lt;p&gt;O exercício de hoje tem como objetivo apresentar uma técnica com potencial para aprimorar a previsão pontual de uma série, conhecida como &lt;strong&gt;bagging&lt;/strong&gt; (&lt;em&gt;bootstrap aggregating&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Partindo do pressuposto de que toda série temporal é uma realização específica de um processo estocástico, o que este método faz é gerar outras possíveis realizações (séries) deste mesmo processo gerador. E como isso é feito?&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, a série original é decomposta em tendência, sazonalidade e restante (pense neste último termo como a parte aleatória da série). Este termo restante é submetido a um processo de bootstrap, isto é, ele sofre um processo de re-amostragem. Todavia, como o termo aleatório de uma série temporal pode ser correlacionado no tempo, esta re-amostragem não é feita por observações, mas em blocos — &lt;strong&gt;blocked bootstrap&lt;/strong&gt;. Por fim, estes novos componentes aleatórios obtidos via bootstrap são reintroduzidos aos componentes de tendência e sazonalidade da série original formando novas séries que são variantes dela.&lt;/p&gt;

&lt;p&gt;Para ficar mais claro, considere o gráfico abaixo. A linha preta é a série original da taxa de desocupação medida pela Pnad Contínua Mensal (IBGE). As linhas coloridas são séries calculadas a partir do processo descrito acima. Do ponto de vista estatístico, qualquer uma daquelas séries poderia ter ocorrido, sendo a série “verdadeira” aquela que efetivamente ocorreu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;2018-09-13-como-aprimorar-previsões-uma-aplicação-com-bootstrap_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, entendido até aqui. E agora? Agora, o método consiste em obter as previsões para cada uma das séries e calcular a média das previsões. Você pode estar se perguntando se, de fato, este método melhora o poder preditivo de um modelo. Existem trabalhos que mostram aumento de performance, na média, para alguns modelos. De todo modo, é aconselhável checar se o mesmo é válido para a série e para o modelo que estamos utilizando. Vamos fazer um exemplo?&lt;/p&gt;

&lt;p&gt;Antes de começarmos, uma breve explicação. Utilizaremos a função bld.mbb.bootstrap() do pacote forecast para calcular as séries via bootstrap, conforme o gráfico acima. O resultado será um objeto do tipo lista com as séries geradas. Em seguida, vamos utilizar a função map() do pacote purrr para gerar previsões para cada uma das séries através do auto.arima(), também do pacote forecast. Mas lembre-se que você pode utilizar qualquer modelo que desejar. O pacote forecast tem uma implementação direta através da função baggedModel(), mas eu preferi desagregar o trabalho para deixar mais claro como é feito. Por fim, vamos comparar os erros de previsão (fora da amostra) da série original e da média das séries geradas (bagging).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Passo 1: carregar pacotes necessários&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(sidrar)
library(tidyverse)
library(forecast)
library(timetk)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Passo 2: importar a série temporal da PNAD&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pnad &amp;lt;- sidrar::get_sidra(api = &amp;quot;/t/6381/n1/all/v/4099/p/all/d/v4099%201&amp;quot;)

pnad_ts &amp;lt;- ts(pnad$Valor, start = c(2012,3), freq = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Passo 3: definir amostras de treino e de teste para medir a acurácia das previsões e também o número de séries geradas por bootstrap&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pnad_treino &amp;lt;- window(pnad_ts, end = c(2016,7))

pnad_teste &amp;lt;- window(pnad_ts, start = c(2016,8))

k &amp;lt;- 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Passo 4: computar as séries via bootstrap&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pnad_boot &amp;lt;- forecast::bld.mbb.bootstrap(pnad_treino, k) %&amp;gt;%
  
  purrr::map(.f = ts, start = c(2012,3), freq = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Passo 5: computar previsões por auto.arima, por bagging&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;aa_fc &amp;lt;- function(x){forecast(auto.arima(x, max.d = 1), n = 24)[[&amp;quot;mean&amp;quot;]]}

pnad_boot_fc &amp;lt;- purrr::map(.x = pnad_boot, .f = aa_fc)

## Computar a previsão pelo método bagging

fc_original &amp;lt;- pnad_boot_fc[[1]]

fc_bagged &amp;lt;- pnad_boot_fc %&amp;gt;% purrr::reduce(`+`) %&amp;gt;% `/`(k)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Passo 6: comparar a acurácia dos modelos&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;accuracy(fc_original, pnad_teste)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                 ME     RMSE      MAE       MPE    MAPE      ACF1 Theil&#39;s U
## Test set -2.362092 3.129262 2.363582 -18.89847 18.9103 0.8906952   10.3499
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;accuracy(fc_bagged, pnad_teste)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                 ME     RMSE      MAE       MPE     MAPE      ACF1
## Test set -1.947639 2.682957 2.013009 -15.56498 16.10364 0.8898631
##          Theil&#39;s U
## Test set   8.86905
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De fato, como é possível observar, as previsões a partir do método &lt;strong&gt;bagging&lt;/strong&gt; apresentaram desempenho superior.&lt;/p&gt;

&lt;p&gt;Os códigos dos exercícios encontram-se disponíveis no &lt;a href=&#34;http://github.com/leripio/blog&#34; target=&#34;_blank&#34;&gt;repositório&lt;/a&gt; do blog no github.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aviso legal&lt;/strong&gt;: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
