<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rstats | RLeripio</title>
    <link>/tags/rstats/</link>
      <atom:link href="/tags/rstats/index.xml" rel="self" type="application/rss+xml" />
    <description>rstats</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en</language><lastBuildDate>Mon, 10 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>rstats</title>
      <link>/tags/rstats/</link>
    </image>
    
    <item>
      <title>Como obter rolling windows de maneira rápida e eficiente</title>
      <link>/post/como-obter-rolling-windows-de-maneira-rapida-e-eficiente/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/como-obter-rolling-windows-de-maneira-rapida-e-eficiente/</guid>
      <description>

&lt;p&gt;No post &lt;a href=&#34;https://www.rleripio.com.br/post/como-generalizar-acoes-de-maneira-eficiente/&#34; target=&#34;_blank&#34;&gt;anterior&lt;/a&gt;, apresentei uma forma bastante conveniente de generalizar ações dispensando &lt;em&gt;for-loops&lt;/em&gt; tradicionais. A abordagem permite eliminar indexações trabalhosas e organizar os objetos de maneira bem prática.&lt;/p&gt;

&lt;p&gt;Outra tarefa muito presente no dia-a-dia de quem trabalha com dados é obter versões em janela móvel para alguma função. O exemplo mais simples seria a média móvel, a qual conta com implementações eficientes em diversos pacotes &amp;ndash; eu recomendo o &lt;code&gt;RcppRoll&lt;/code&gt; que, além da média móvel, também computa outras estatísticas.&lt;/p&gt;

&lt;p&gt;Entretanto, na maioria dos casos não existe uma versão &lt;em&gt;rolling&lt;/em&gt; da função desejada &amp;ndash; sobretudo para aquelas criadas por nós para atender a alguma demanda específica. É possível obter resultados &lt;em&gt;rolling&lt;/em&gt; aplicando a função desejada sobre subconjuntos dos dados e, novamente, o post &lt;a href=&#34;https://www.rleripio.com.br/post/como-generalizar-acoes-de-maneira-eficiente/&#34; target=&#34;_blank&#34;&gt;anterior&lt;/a&gt; pode ajudar nisso &amp;ndash; pense em cada subconjunto como um elemento de uma lista.&lt;/p&gt;

&lt;p&gt;Porém, existe uma forma ainda mais prática de fazer isso através da função &lt;code&gt;rollify&lt;/code&gt; do pacote &lt;code&gt;tibbletime&lt;/code&gt;. A ideia da função é criar versões &lt;em&gt;rolling&lt;/em&gt; da função desejada e a integração com &lt;code&gt;tibble&lt;/code&gt;&amp;rsquo;s torna possível retornar as saídas de maneira organizada.&lt;/p&gt;

&lt;p&gt;A sintaxe é bem simples e, para ilustrar, vamos computar uma &lt;em&gt;rolling regression&lt;/em&gt; &amp;ndash; isto é, obter o coeficiente de uma regressão em janela móvel. Isso é bem útil nas aplicações em que o coeficiente de interesse varia no tempo. No exemplo, vou retornar o coeficiente autoregressivo de um modelo &lt;strong&gt;SARIMA(1,0,0)(1,0,0)[12]&lt;/strong&gt; ajustado à série histórica do IPCA como forma de medir a inércia da inflação ao longo do tempo.&lt;/p&gt;

&lt;h3 id=&#34;passo-1-carregar-pacotes-e-importar-os-dados&#34;&gt;Passo 1: carregar pacotes e importar os dados&lt;/h3&gt;

&lt;p&gt;Para baixar a série do IPCA dos preços livres, vou utilizar o pacote &lt;code&gt;rbcb&lt;/code&gt; do Wilson Freitas. Este pacote não está mais disponível no CRAN, mas pode ser instalado a partir do &lt;a href=&#34;https://github.com/wilsonfreitas/rbcb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; do autor através do seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#39;wilsonfreitas/rbcb&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rbcb)
library(tidyverse)
library(tibbletime)

ipca_livres &amp;lt;- rbcb::get_series(code = list(&amp;quot;ipca&amp;quot; = 11428))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;passo-2-criar-a-função-que-ajusta-o-modelo-e-retorna-o-coeficiente-ar-e-seu-erro-padrão&#34;&gt;Passo 2: criar a função que ajusta o modelo e retorna o coeficiente AR e seu erro padrão&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_ar1 &amp;lt;- function(x){
  
x_ts &amp;lt;- ts(x, frequency = 12)  
  
fit_sar1 &amp;lt;- arima(x_ts, order = c(1,0,0), seasonal = list(order = c(1,0,0)))

out &amp;lt;- list(&amp;quot;beta&amp;quot; = fit_sar1[[&amp;quot;coef&amp;quot;]][&amp;quot;ar1&amp;quot;],
            &amp;quot;se&amp;quot;   = fit_sar1[[&amp;quot;var.coef&amp;quot;]][&amp;quot;ar1&amp;quot;, &amp;quot;ar1&amp;quot;] %&amp;gt;% sqrt())

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;passo-3-criar-a-versão-rolling-da-função&#34;&gt;Passo 3: criar a versão &lt;em&gt;rolling&lt;/em&gt; da função&lt;/h3&gt;

&lt;p&gt;O argumento &lt;code&gt;window&lt;/code&gt; controla o tamanho da janela. O argumento &lt;code&gt;unlist = FALSE&lt;/code&gt; garante que os resultados ficarão no formato de lista. Isso é necessário aqui porque nosso &lt;em&gt;output&lt;/em&gt; é uma lista com dois objetos: o coeficiente e seu erro padrão.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;roll_get_ar1 &amp;lt;- tibbletime::rollify(.f = get_ar1, window = 60, unlist = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Na sequência, usamos a função criada acima para gerar um &lt;code&gt;tibble&lt;/code&gt; contendo uma coluna com o coeficiente AR(1) e outra com o erro-padrão. O &lt;code&gt;map&lt;/code&gt; é utilizado para extrair os elementos da lista.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inercia &amp;lt;- ipca_livres %&amp;gt;%
  
  dplyr::mutate(out = roll_get_ar1(ipca)) %&amp;gt;%
  
  dplyr::filter(!is.na(out)) %&amp;gt;%
  
  dplyr::mutate(ar1 = purrr::map_dbl(.x = out, .f = function(x) x$beta),
                se  = purrr::map_dbl(.x = out, .f = function(x) x$se))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por fim, podemos gerar um gráfico como este abaixo contendo a inércia estimada ao longo do tempo, bem como a significância do coeficiente $ \pm 1.96 \times \text{se} $. Também adicionamos uma curva suavizada (loess) para deixar a trajetória mais comportada.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/post/2020-08-10-como-obter-rolling-windows-de-maneira-rápida-e-eficiente_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vale ressaltar que o modelo SARIMA é bem simples e não controla os efeitos de diversos fatores sobre a inflação &amp;ndash; atividade, câmbio, etc. Portanto, para medir adequadamente o grau de inércia precisaríamos adicionar mais estrutura à especificação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aviso legal&lt;/strong&gt;: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usando tidyr para criar dummies e lags</title>
      <link>/post/usando-tidyr-pivot-para-criar-dummies-e-lags/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/usando-tidyr-pivot-para-criar-dummies-e-lags/</guid>
      <description>&lt;p&gt;Imagine que você tenha uma base de dados com dezenas (ou centenas) de variáveis e quer criar os &lt;em&gt;lags&lt;/em&gt; de 1 a 5 para cada uma destas variáveis. Além disso, precisa adicionar &lt;em&gt;dummies&lt;/em&gt; mensais para controlar algum fator sazonal. Esta tarefa faz parte do dia-a-dia de quem trabalha com modelos econométricos/machine learning e ter uma forma prática ajuda bastante.&lt;/p&gt;

&lt;p&gt;Existem algumas formas de resolver esse problema. Uma bem simples e prática envolve o &lt;code&gt;tidyr&lt;/code&gt;, pacote do &lt;code&gt;tidyverse&lt;/code&gt; dedicado à manipulação de &lt;em&gt;frames&lt;/em&gt;. Suas principais funções são &lt;code&gt;pivot_longer&lt;/code&gt; e &lt;code&gt;pivot_wider&lt;/code&gt;, usadas para posicionar os dados, respectivamente, em formato &lt;em&gt;long&lt;/em&gt; e &lt;em&gt;wide&lt;/em&gt;. Fazendo uso correto destas funções e de seus argumentos, é possível resolver o problema de forma muito simples. Então vamos lá!&lt;/p&gt;

&lt;p&gt;Para começar, vou criar uma &lt;em&gt;frame&lt;/em&gt; artificial contendo uma coluna com datas mensais e três colunas representando diferentes variáveis &amp;ndash; var1, var2 e var3. Lembrando que a abordagem é geral o suficiente para acomodar qualquer número de variáveis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)
library(lubridate)

set.seed(123)

df &amp;lt;- tibble(data = seq(ymd(&amp;quot;2019-01-01&amp;quot;), ymd(&amp;quot;2020-07-01&amp;quot;), by = &amp;quot;month&amp;quot;),
             var1 = rnorm(19),
             var2 = rnorm(19),
             var3 = rnorm(19))

tail(df, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 4
##   data         var1    var2    var3
##   &amp;lt;date&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 2020-03-01 -0.556  0.878  -0.0429
## 2 2020-04-01  1.79   0.822   1.37  
## 3 2020-05-01  0.498  0.689  -0.226 
## 4 2020-06-01 -1.97   0.554   1.52  
## 5 2020-07-01  0.701 -0.0619 -1.55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De início, vamos criar as &lt;em&gt;dummies&lt;/em&gt; sazonais. O primeiro passo é criar uma coluna com os meses da coluna de datas. A função &lt;code&gt;month&lt;/code&gt; do pacote &lt;code&gt;lubridate&lt;/code&gt; fornece uma forma conveniente para isso. Em seguida, criamos uma coluna com valores iguais a 1 &amp;ndash; isso ficará mais claro adiante e os nomes das colunas não importam. Por fim, recorremos à função &lt;code&gt;pivot_wider&lt;/code&gt;. Transpondo a coluna dos meses e preenchendo com os 1&amp;rsquo;s, obteríamos um &lt;em&gt;frame&lt;/em&gt; no qual cada mês é uma coluna onde o valor é igual a 1 para o mês correspondente na coluna data e &lt;code&gt;NA&lt;/code&gt; nos demais. Como nosso objetivo é ter 0&amp;rsquo;s no lugar desses &lt;code&gt;NA&lt;/code&gt;, usamos o argumento &lt;code&gt;values_fill&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df_seasonal &amp;lt;- df %&amp;gt;%
  
  mutate(meses = month(data, label = T, abbr = T),
         um = 1) %&amp;gt;%
  
  pivot_wider(names_from = meses, values_from = um, values_fill = list(um = 0))

tail(df_seasonal, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 16
##   data         var1    var2    var3   jan   fev   mar   abr   mai   jun   jul
##   &amp;lt;date&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 2020-03-01 -0.556  0.878  -0.0429     0     0     1     0     0     0     0
## 2 2020-04-01  1.79   0.822   1.37       0     0     0     1     0     0     0
## 3 2020-05-01  0.498  0.689  -0.226      0     0     0     0     1     0     0
## 4 2020-06-01 -1.97   0.554   1.52       0     0     0     0     0     1     0
## 5 2020-07-01  0.701 -0.0619 -1.55       0     0     0     0     0     0     1
## # … with 5 more variables: ago &amp;lt;dbl&amp;gt;, set &amp;lt;dbl&amp;gt;, out &amp;lt;dbl&amp;gt;, nov &amp;lt;dbl&amp;gt;,
## #   dez &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora vamos criar os &lt;em&gt;lags&lt;/em&gt; das variáveis. Aqui a gente vai usar tanto a &lt;code&gt;pivot_longer&lt;/code&gt; como &lt;code&gt;pivot_wider&lt;/code&gt;. O primeiro passo é deixar o &lt;em&gt;frame&lt;/em&gt; no formato &lt;em&gt;long&lt;/em&gt;, isto é, as variáveis serão empilhadas em uma única coluna que eu chamarei de &amp;ldquo;var&amp;rdquo;. Os valores ficarão na coluna &amp;ldquo;l0&amp;rdquo; que denota o &lt;em&gt;lag&lt;/em&gt; 0.&lt;/p&gt;

&lt;p&gt;Na sequência, vamos criar colunas com os &lt;em&gt;lags&lt;/em&gt; desejados: 1 a 5. Essas colunas também precisarão ser colocadas no formato &lt;em&gt;long&lt;/em&gt;. Finalmente, vamos expandir o &lt;em&gt;frame&lt;/em&gt; (formato &lt;em&gt;wider&lt;/em&gt;) reunindo as duas colunas: &amp;ldquo;var&amp;rdquo; e &amp;ldquo;lags&amp;rdquo;. Isto produzirá o resultado desejado. O &lt;code&gt;group_by&lt;/code&gt; e &lt;code&gt;arrange&lt;/code&gt; são utilizados para garantir a ordem temporal dos dados.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df_lags &amp;lt;- df %&amp;gt;%
  
  pivot_longer(-&amp;quot;data&amp;quot;, names_to = &amp;quot;var&amp;quot;, values_to = &amp;quot;l0&amp;quot;) %&amp;gt;%
  
  group_by(var) %&amp;gt;%
  
  arrange(data) %&amp;gt;%
  
  mutate(l1 = lag(l0, 1),
         l2 = lag(l0, 2),
         l3 = lag(l0, 3),
         l4 = lag(l0, 4),
         l5 = lag(l0, 5)) %&amp;gt;%
  
  pivot_longer(-c(data, var), names_to = &amp;quot;lag&amp;quot;, values_to = &amp;quot;valor&amp;quot;) %&amp;gt;%
  
  pivot_wider(names_from = c(&amp;quot;var&amp;quot;, &amp;quot;lag&amp;quot;), values_from = &amp;quot;valor&amp;quot;)

tail(df_lags, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 19
##   data       var1_l0 var1_l1 var1_l2 var1_l3 var1_l4 var1_l5 var2_l0 var2_l1
##   &amp;lt;date&amp;gt;       &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 2020-03-01  -0.556   0.111   0.401   0.360   1.22   -0.446  0.878    0.895
## 2 2020-04-01   1.79   -0.556   0.111   0.401   0.360   1.22   0.822    0.878
## 3 2020-05-01   0.498   1.79   -0.556   0.111   0.401   0.360  0.689    0.822
## 4 2020-06-01  -1.97    0.498   1.79   -0.556   0.111   0.401  0.554    0.689
## 5 2020-07-01   0.701  -1.97    0.498   1.79   -0.556   0.111 -0.0619   0.554
## # … with 10 more variables: var2_l2 &amp;lt;dbl&amp;gt;, var2_l3 &amp;lt;dbl&amp;gt;, var2_l4 &amp;lt;dbl&amp;gt;,
## #   var2_l5 &amp;lt;dbl&amp;gt;, var3_l0 &amp;lt;dbl&amp;gt;, var3_l1 &amp;lt;dbl&amp;gt;, var3_l2 &amp;lt;dbl&amp;gt;, var3_l3 &amp;lt;dbl&amp;gt;,
## #   var3_l4 &amp;lt;dbl&amp;gt;, var3_l5 &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A grande vantagem desta abordagem é não precisar escrever o nome das variáveis para criar os &lt;em&gt;lags&lt;/em&gt; &amp;ndash; lembrem-se de que elas podem ser dezenas ou centenas. Adicionalmente, não precisamos criar funções auxiliares ou recorrer à geração dinâmica de variáveis &amp;ndash; o que no contexto do &lt;code&gt;tidyverse&lt;/code&gt; envolve algum tipo de &lt;em&gt;Non-Standard Evaluation&lt;/em&gt; &amp;ndash; nem sempre tão simples para quem tá começando.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aviso legal&lt;/strong&gt;: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
