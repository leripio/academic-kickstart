[{"authors":["admin"],"categories":null,"content":"Mestre em Economia com experiência na elaboração de modelos econométricos, previsão de séries temporais e programação em linguagem R. Trabalhou como pesquisador no IBRE/FGV e na CODEPLAN/DF. Atualmente é analista de pesquisa quantitativa na Itaú Asset Management.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Mestre em Economia com experiência na elaboração de modelos econométricos, previsão de séries temporais e programação em linguagem R. Trabalhou como pesquisador no IBRE/FGV e na CODEPLAN/DF. Atualmente é analista de pesquisa quantitativa na Itaú Asset Management.","tags":null,"title":"J. Renato Leripio","type":"authors"},{"authors":null,"categories":["Previsão"],"content":"Nem sempre empregamos modelos econométricos ou de machine learning para fazer projeções. É comum termos à disposição alguma forma funcional calibrada ou parâmetros que nos informam sobre como evolui determinada variável. A partir destas informações, podemos conjecturar as realizações futuras a partir de cenários para as variáveis explicativas.\nImagine, por exemplo, que o IPCA dos preços livres aumente cerca de 0.5p.p para cada 10% de depreciação cambial. Podemos, neste caso, fazer projeções para o IPCA com base no que esperamos para a taxa de câmbio em diferentes cenários (tudo o mais constante). Isso nos dará projeções pontuais para o IPCA condicional aos valores assumidos para o câmbio: no cenário A o câmbio avança 5%; no cenário B o câmbio recua 7%; e por aí vai.\nApesar de extremamente útil, esta abordagem traz limitações. Uma delas é não fornecer, para um pequeno conjunto de cenários, uma distribuição completa de projeções a partir da qual seja possível inferir a incerteza em torno do valor central. A prática comum costuma ser definir cenários para os limites superior e inferior e assumir que todos os valores estão contidos neste intervalo com a mesma probabilidade.\nEntretanto, em certas situações nós temos uma noção do balanço de risco dos nossos cenários: é mais provável que o câmbio termine o ano com variação positiva do que negativa, por exemplo. Além disso, pode ser que a nossa proejeção dependa do cenário para mais de uma variável. Neste caso, precisamos considerar também a interação entre os possíveis cenários de todas as variáveis.\nUma solução para lidar com essas dificuldades é gerar distribuições que reflitam o nosso cenário para cada variável e, em seguida, simular um grande número de cenários conjuntos para o resultado final. Para ilustrar, vamos recorrer a um exemplo típico dos livros-texto de macroeconomia: a evolução da dívida pública.\nDe maneira simplificada, a relação dívida pública/PIB evolui de acordo com a seguite expressão:\n\\[ \\Delta b_t = (r - g) \\times b_{t-1} - s \\]\nonde: $ b $ é a relação dívida/PIB; $ r $ é a taxa de juros real; e $ s $ é o superávit primário como proporção do PIB.\nSe quisermos usar essa expressão para projetar a dívida pública para 2021, precisaríamos de um cenário para quatro variáveis em 2021: taxa de juros nominal, inflação, crescimento do PIB e superávit primário.\nPara as três primeiras, vamos tomar como referência as expectativas do mercado divulgadas pelo BCB em agosto. Nelas, os projeções para o PIB de 2021 aparecem centradas ao redor de 3.5% com grande assimetria à esquerda. O IPCA segue padrão parecido, centrado em 2.9% e maior massa à esquerda deste valor. A taxa de juros Selic, por sua vez, é bimodal com valores de 2% e 3.5%.\nVamos usar o pacote sn para gerar distribuições (assimétricas) semelhantes. Para a taxa de juros Selic, vamos assumir que só existem dois valores possíveis: 2% com 40% de chance e 3.5% com 60% de chance. E o superávit, para simplificar, será 0%.\nlibrary(sn) library(tidyverse) # Objetos para simular as ditribuições via pacote sn # Argumento gamma controla a assimetria lista_cp \u0026lt;- list(\u0026quot;ipca\u0026quot; = c(mean = 2.9, s.d. = 0.39, gamma = -0.4), \u0026quot;pib\u0026quot; = c(mean = 3.48, s.d. = 0.68 , gamma = -0.6)) lista_dp \u0026lt;- purrr::map(.x = lista_cp, .f = cp2dp, family = \u0026quot;sn\u0026quot;) # Número de simulações n_sim \u0026lt;- 100 # Tibble com valores simulados em cada coluna set.seed(123) variaveis_sim \u0026lt;- tibble( ipca = sn::rsn(n_sim, dp = lista_dp[['ipca']]), pib = sn::rsn(n_sim, dp = lista_dp[['pib']]), selic = sample(c(2.0, 3.5), n_sim, prob = c(0.40, 0.60), replace = TRUE ) )  Antes de prosseguir, cabe observar o histograma das distribuições geradas e como elas possuem, de fato, assimetria. No fim das contas, isto vai contribuir para elevar a probabilidade de cenários que contenham valores para PIB e IPCA mais baixos.\nTodos os cenários simulados estão no objeto variaveis_sim. Ele será utilizado para alimentar a expressão que define a variação da dívida pública. Antes, porém, precisamos gerar todas as combinações possíveis daqueles valores. A única ressalva aqui é que, com 100 simulações, temos $ 100^K $ cenários, onde $ K $ é o número de variáveis. Portanto, ampliar demais o número de variáveis e/ou de simulações pode gerar um objeto impossível de armazenar na memória.\ncenarios_sim \u0026lt;- purrr::cross3(.x = variaveis_sim$ipca, .y = variaveis_sim$pib, .z = variaveis_sim$selic)  Por fim, simulamos os possíveis resultados para a dívida no próximo ano a partir de um valor inicial de 60%, conforme abaixo:\ndivida_sim \u0026lt;- purrr::map_dbl(.x = cenarios_sim, .f = function(x){ x \u0026lt;- unlist(x) ipca \u0026lt;- x[1] pib \u0026lt;- x[2] selic \u0026lt;- x[3] r \u0026lt;- selic - ipca b_inicial \u0026lt;- 60.0 b_final \u0026lt;- (r - pib)*(b_inicial/100) })  O resultado segue abaixo. O valor central para nossa projeção é ao redor de -2%, o que indica uma dívida menor para 2021 -- lembrando que existe zero compromisso aqui com a realidade. Isso seria compatível com um cenário de juros reais inferiores ao crescimento do PIB e sem déficit primário.\nAdicionalmente, podemos extrair a incerteza através do quantis da distribuição: por exemplo, a dívida deve cair entre 3.13% e 1.11% considerando o intervalo de 95%. Alternativamente, poderíamos extrair a probabilidade de ocorrência de cenários extremos: qual a chance de a dívida cair mais do que 3.5% ou menos que 1%? Fica de exercício para os interessados!\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1601510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601572358,"objectID":"be729c68123143c534753b1fa279f39d","permalink":"/post/como-obter-distribuicoes-a-partir-de-cenarios/","publishdate":"2020-10-01T00:00:00Z","relpermalink":"/post/como-obter-distribuicoes-a-partir-de-cenarios/","section":"post","summary":"Nem sempre empregamos modelos econométricos ou de machine learning para fazer projeções. É comum termos à disposição alguma forma funcional calibrada ou parâmetros que nos informam sobre como evolui determinada variável. A partir destas informações, podemos conjecturar as realizações futuras a partir de cenários para as variáveis explicativas.\nImagine, por exemplo, que o IPCA dos preços livres aumente cerca de 0.5p.p para cada 10% de depreciação cambial. Podemos, neste caso, fazer projeções para o IPCA com base no que esperamos para a taxa de câmbio em diferentes cenários (tudo o mais constante).","tags":["cenário","distribuição","incerteza","previsão"],"title":"Como medir a incerteza em cenários","type":"post"},{"authors":[],"categories":["Data Science"],"content":"Em post recente mostrei como obter versões rolling para funções específicas e como isso poderia ser utilizado para gerar coeficientes variantes no tempo em uma regressão.\nUma limitação desta abordagem é que precisamos definir janelas para a estimação, o que pode alterar sensivelmente os resultados. Neste sentido, é desejável uma forma estrutural de obter coeficientes variantes no tempo.\nUma classe específica de modelos que atende a esse propósito é o Dynamic linear model (DLM). Em termos bem gerais, trata-se de escrever o modelo em um formato de estado-espaço e, na sequência, implementar algum algoritmo para retornar as estimativas dos parâmetros. Isso ficará mais claro com o exemplo.\nPasso 1: carregar pacotes e importar os dados Diferente do exemplo com rolling windows, no qual modelei o IPCA como um processo SARIMA(1,0,0)(1,0,0)[12], aqui vou aplicar um ajuste sazonal à série de modo que possamos dispensar o termo sazonal da especificação e reduzi-la a um AR(1). Isso tornará o problema mais simples.\nlibrary(tidyverse) library(MARSS) library(rbcb) library(seasonal) # Importar IPCA livres ipca_livres \u0026lt;- rbcb::get_series(code = list(\u0026quot;ipca\u0026quot; = 11428), start_date = \u0026quot;2004-01-01\u0026quot;, as = \u0026quot;ts\u0026quot;) # Aplicar ajuste sazonal ipca_livres_sa \u0026lt;- final(seas(ipca_livres)) # Colocar em formato tibble e criar termo AR(1) ipca_tbl \u0026lt;- ipca_livres_sa %\u0026gt;% timetk::tk_tbl() %\u0026gt;% magrittr::set_colnames(c(\u0026quot;date\u0026quot;, \u0026quot;ipca\u0026quot;)) %\u0026gt;% dplyr::mutate(ipca_l1 = lag(ipca, 1)) %\u0026gt;% tidyr::drop_na()  Passo 2: escrever o modelo em estado-espaço e estimar A formulação em estado-espaço pressupõe, basicamente, que existe um processo latente -- não observável -- e um conjunto de observações que chega até nós -- definido pelo modelo de observação. O processo latente, definido por um modelo de estado, evolui a partir de alguma lógica -- geralmente assumimos que é um random walk. Em particular, é a variância do termo de erro da equação de estado -- $R$ -- que cria dinâmica nos coeficientes.\n\\[ Y_t = Z\\theta_t + A + V_t, Vt \\sim N(0, Q) \\rightarrow \\text{(Observação)} \\\\ \\theta_t = B\\theta_{t-1} + U + W_t, W_t \\sim N(0,R) \\rightarrow \\text{(Estado)} \\]\nAos interessados em compreender melhor como especificar tais modelos, deixo no final algumas boas referências.\nVamos usar o pacote MARSS para estimar o modelo. Nosso sistema é expresso pelos objetos abaixo com o mesmo nome em que aparecem nas equações e devem ser declarados como matrizes -- ainda que em alguns casos sejam unidimensionais. Tudo o que precisa ser estimado entra como character. Para um AR(1) com intercepto, ambos os coeficientes variando no tempo, temos a seguinte configuração:\n# Número de observações n \u0026lt;- nrow(ipca_tbl) # Variável dependente IPCA e independente IPCA_l1 y \u0026lt;- matrix(ipca_tbl$ipca, nrow = 1) y_l1 \u0026lt;- matrix(ipca_tbl$ipca_l1, nrow = 1) # Eq. de estado B \u0026lt;- diag(2) U \u0026lt;- matrix(0, 2, 1) Q \u0026lt;- matrix(c(\u0026quot;q.alpha\u0026quot;, 0, 0, \u0026quot;q.beta\u0026quot;), 2, 2) # Eq. de observação Z \u0026lt;- array(NA, c(1, 2, n)) Z[1, 1, ] \u0026lt;- rep(1, n) # Intercepto Z[1, 2, ] \u0026lt;- y_l1 # Termo AR(1) A \u0026lt;- matrix(0) R \u0026lt;- matrix(\u0026quot;r\u0026quot;) # Valores iniciais do sistema x0 \u0026lt;- list(x0 = matrix(0, nrow = 2)) # Reunir as informações dlm.terms \u0026lt;- list(B = B, U = U, Q = Q, Z = Z, A = A, R = R) ## Ajuste do DLM dlm.fit \u0026lt;- MARSS(y, inits = x0, model = dlm.terms, silent = TRUE)  É importante realizar diagnósticos a fim de atestar a validade do modelo. Dado que o objetivo aqui é expositivo, pularemos esta etapa.\nPasso 3: Resultados Os valores do coeficiente ao longo do tempo podem ser obtidos em dlm.fit$states, assim como seu erro-padrão em dlm.fit$states.se. A partir deles, podemos gerar um gráfico para acompanhar a evolução do coeficiente autorregressivo. Adicionalmente, vamos incluir o valor do coeficiente obtido por um AR(1) fixo no tempo para servir de comparação.\nA principal mensagem aqui é que, enquanto a estimação estática parece ser uma boa estimativa do coeficiente até meados de 2016, o mesmo não pode ser dito para o período seguinte. Em particular, isto tende a ocorrer quando existem mudanças estruturais importantes na série de interesse.\nNo caso específico do nosso exercício, a literatura reporta que a persistência inflacionária guarda relação direta com o nível da inflação e inversa com a credibilidade da autoridade monetária. Nesse sentido, apesar da nossa especificação não controlar diversos fatores relevantes, faz sentido pensar que a persistência deva ser menor no período recente.\nO Código completo encontra-se no repositório do blog no GitHub.\nReferências\n Holmes, E. E., M. D. Scheuerell, and E. J. Ward. Applied time series analysis for fisheries and environmental data. NOAA Fisheries, Northwest Fisheries Science Center, 2725 Montlake Blvd E., Seattle, WA 98112. Contacts eli.holmes@noaa.gov, eric.ward@noaa.gov, and mark.scheuerell@noaa.gov.\n Analysis of multivariate timeseries using the MARSS package. https://cran.r-project.org/web/packages/MARSS/vignettes/UserGuide.pdf\n  Aviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1598054400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598144241,"objectID":"020e338a52f4185021e68c02b1466c33","permalink":"/post/usando-dlm-para-estimar-coeficientes-variantes-no-tempo/","publishdate":"2020-08-22T00:00:00Z","relpermalink":"/post/usando-dlm-para-estimar-coeficientes-variantes-no-tempo/","section":"post","summary":"Em post recente mostrei como obter versões rolling para funções específicas e como isso poderia ser utilizado para gerar coeficientes variantes no tempo em uma regressão.\nUma limitação desta abordagem é que precisamos definir janelas para a estimação, o que pode alterar sensivelmente os resultados. Neste sentido, é desejável uma forma estrutural de obter coeficientes variantes no tempo.\nUma classe específica de modelos que atende a esse propósito é o Dynamic linear model (DLM).","tags":["dynamic linear models","dlm","time varying"],"title":"Usando DLM para estimar coeficientes variantes no tempo","type":"post"},{"authors":[],"categories":["Data Science"],"content":" Alguns métodos para séries temporais exigem que as séries sejam estacionárias. Além das questões estatísticas associadas aos estimadores, regredir séries integradas coloca em dúvida a validade do modelo \u0026ndash; o problema da regressão espúria.\nUm procedimento padrão ao trabalhar com séries temporais é, portanto, checar se as séries são estacionárias e, caso não sejam, aplicar algum tratamento \u0026ndash; geralmente isso envolve tomar a primeira diferença da série.\nApesar de simples, este procedimento envolve certo trabalho. Em particular quando temos um conjunto grande de variáveis, não parece razoável repetir o processo para cada uma delas.\nA maneira mais geral de automatizar esta tarefa é criar uma função que aplica os testes de raiz unitária sobre a série, compara a estatística com o valor crítico do teste e diferencia a série caso exista evidência de não-estacionaridade.\nO pacote forecast resolveu boa parte desse fluxo com a função ndiffs. A função aplica os testes mais comuns \u0026ndash; ADF, PP e KPSS \u0026ndash; e retorna o número de vezes que a série precisa ser diferenciada. Nosso trabalho se reduz, portanto, a reter esta informação e usá-la para computar as diferenças.\nVamos a um exemplo de como fazer isso a partir de um conjunto simulado de séries temporais estacionárias e não-estacionárias.\nPasso 1: Carregar pacotes e simular os dados # 1. Carregar pacotes library(tidyverse) library(forecast) library(timetk) # 2. Simular séries set.seed(123) mu \u0026lt;- list(-2, 0, 2, 4, 6) # média das séries sigma \u0026lt;- list(1, 2, 3, 4, 5) # variância das séries series \u0026lt;- purrr::map2_dfc(mu, sigma, rnorm, n = 100) %\u0026gt;% dplyr::mutate(date = seq.Date(from = as.Date(\u0026quot;2010-01-01\u0026quot;), length.out = 100, by = \u0026quot;month\u0026quot;)) %\u0026gt;% dplyr::mutate_at(vars(-date), ~ timetk::tk_ts(.)) %\u0026gt;% magrittr::set_colnames(c(paste0(\u0026quot;Serie\u0026quot;, seq_along(mu)), \u0026quot;date\u0026quot;)) # 3. Tornar as séries Serie1 e Serie3 não-estacionárias series_aux \u0026lt;- series %\u0026gt;% dplyr::mutate_at(vars(Serie1, Serie3), ~ cumsum(.))  Passo 2: checar o número de diferenças necessárias Aqui vamos utilizar a função ndiffs para determinar o número de diferenças necessárias para tornar a série estacionária, porém com alguns avanços. Primeiro, vamos utilizar os três testes disponíveis: ADF, PP e KPSS.\nEm seguida, vamos criar uma regra para definir se a série será ou não diferenciada a partir dos resultados anteriores. Como esse é um exercício simulado, sabemos que as séries não-estacionárias \u0026ndash; Serie1 e Serie3 \u0026ndash; são I(1), isto é, só precisam de uma diferença.\nPortanto, os testes devem retornar 1 para Serie1 e Serie3 e 0 para as demais. Assim, nossa regra será a seguinte: se a soma dos resultados for superior a 2, ou seja, mais de um teste retornar necessidade de uma diferença, esta série deverá ser diferenciada. Vamos usar uma coluna Diferenciar = \u0026ldquo;SIM\u0026rdquo; neste caso e \u0026ldquo;NAO\u0026rdquo; para o caso contrário.\nA ressalva aqui é que esta é uma regra bem simples para atender ao nosso exercício. Os interessados podem adequá-la aos seus próprios objetivos.\ntestes \u0026lt;- list(kpss = \u0026quot;kpss\u0026quot;, pp = \u0026quot;pp\u0026quot;, adf = \u0026quot;adf\u0026quot;) ndiffs_testes \u0026lt;- function(x) purrr::map(testes, function(y){ forecast::ndiffs(x, alpha = 0.05, y) }) series_ndiffs \u0026lt;- series_aux %\u0026gt;% dplyr::select(-date) %\u0026gt;% purrr::map(.f = ndiffs_testes) %\u0026gt;% plyr::ldply(bind_rows) %\u0026gt;% dplyr::mutate(Diferenciar = ifelse(kpss + adf + pp \u0026gt;= 2, \u0026quot;SIM\u0026quot;, \u0026quot;NAO\u0026quot;)) series_ndiffs  ## .id kpss pp adf Diferenciar ## 1 Serie1 1 1 1 SIM ## 2 Serie2 0 0 0 NAO ## 3 Serie3 1 1 1 SIM ## 4 Serie4 0 0 0 NAO ## 5 Serie5 0 0 0 NAO  Passo 4: Diferenciar as séries não-estacionárias O último passo consiste em diferenciar aquelas séries consideradas não-estacionárias que receberam \u0026ldquo;SIM\u0026rdquo; na etapa anterior.\n# Reter o id das séries não-estacionárias series_labs \u0026lt;- series_ndiffs %\u0026gt;% dplyr::filter(Diferenciar == \u0026quot;SIM\u0026quot;) %\u0026gt;% dplyr::pull(.id) # Diferenciar series_dif \u0026lt;- series_aux %\u0026gt;% dplyr::mutate_at(vars(all_of(series_labs)), ~ . - dplyr::lag(., 1)) head(series_dif, 5)  ## # A tibble: 5 x 6 ## Serie1 Serie2 Serie3 Serie4 Serie5 date ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;date\u0026gt; ## 1 NA -1.42 NA 1.14 5.63 2010-01-01 ## 2 -2.23 0.514 5.94 0.989 0.157 2010-02-01 ## 3 -0.441 -0.493 1.20 0.246 2.83 2010-03-01 ## 4 -1.93 -0.695 3.63 -0.210 5.86 2010-04-01 ## 5 -1.87 -1.90 0.757 2.25 9.35 2010-05-01  Por fim, o pacote forecast também dispõe da função nsdiffs que realiza o mesmo procedimento para séries que necessitam de diferenças sazonais.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1597536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597616967,"objectID":"adf19f36640112a775381269572c5387","permalink":"/post/como-automatizar-o-tratamento-de-series-nao-estacionarias/","publishdate":"2020-08-16T00:00:00Z","relpermalink":"/post/como-automatizar-o-tratamento-de-series-nao-estacionarias/","section":"post","summary":"Alguns métodos para séries temporais exigem que as séries sejam estacionárias. Além das questões estatísticas associadas aos estimadores, regredir séries integradas coloca em dúvida a validade do modelo \u0026ndash; o problema da regressão espúria.\nUm procedimento padrão ao trabalhar com séries temporais é, portanto, checar se as séries são estacionárias e, caso não sejam, aplicar algum tratamento \u0026ndash; geralmente isso envolve tomar a primeira diferença da série.\nApesar de simples, este procedimento envolve certo trabalho.","tags":["unit roots","time series","séries temporais","raiz unitaria"],"title":"Como automatizar o tratamento de séries não-estacionárias","type":"post"},{"authors":[],"categories":["Data Science"],"content":" No post anterior, apresentei uma forma bastante conveniente de generalizar ações dispensando for-loops tradicionais. A abordagem permite eliminar indexações trabalhosas e organizar os objetos de maneira bem prática.\nOutra tarefa muito presente no dia-a-dia de quem trabalha com dados é obter versões em janela móvel para alguma função. O exemplo mais simples seria a média móvel, a qual conta com implementações eficientes em diversos pacotes \u0026ndash; eu recomendo o RcppRoll que, além da média móvel, também computa outras estatísticas.\nEntretanto, na maioria dos casos não existe uma versão rolling da função desejada \u0026ndash; sobretudo para aquelas criadas por nós para atender a alguma demanda específica. É possível obter resultados rolling aplicando a função desejada sobre subconjuntos dos dados e, novamente, o post anterior pode ajudar nisso \u0026ndash; pense em cada subconjunto como um elemento de uma lista.\nPorém, existe uma forma ainda mais prática de fazer isso através da função rollify do pacote tibbletime. A ideia da função é criar versões rolling da função desejada e a integração com tibble\u0026rsquo;s torna possível retornar as saídas de maneira organizada.\nA sintaxe é bem simples e, para ilustrar, vamos computar uma rolling regression \u0026ndash; isto é, obter o coeficiente de uma regressão em janela móvel. Isso é bem útil nas aplicações em que o coeficiente de interesse varia no tempo. No exemplo, vou retornar o coeficiente autoregressivo de um modelo SARIMA(1,0,0)(1,0,0)[12] ajustado à série histórica do IPCA como forma de medir a inércia da inflação ao longo do tempo.\nPasso 1: carregar pacotes e importar os dados Para baixar a série do IPCA dos preços livres, vou utilizar o pacote rbcb do Wilson Freitas. Este pacote não está mais disponível no CRAN, mas pode ser instalado a partir do GitHub do autor através do seguinte comando:\ndevtools::install_github('wilsonfreitas/rbcb')  library(rbcb) library(tidyverse) library(tibbletime) ipca_livres \u0026lt;- rbcb::get_series(code = list(\u0026quot;ipca\u0026quot; = 11428))  Passo 2: criar a função que ajusta o modelo e retorna o coeficiente AR e seu erro padrão get_ar1 \u0026lt;- function(x){ x_ts \u0026lt;- ts(x, frequency = 12) fit_sar1 \u0026lt;- arima(x_ts, order = c(1,0,0), seasonal = list(order = c(1,0,0))) out \u0026lt;- list(\u0026quot;beta\u0026quot; = fit_sar1[[\u0026quot;coef\u0026quot;]][\u0026quot;ar1\u0026quot;], \u0026quot;se\u0026quot; = fit_sar1[[\u0026quot;var.coef\u0026quot;]][\u0026quot;ar1\u0026quot;, \u0026quot;ar1\u0026quot;] %\u0026gt;% sqrt()) }  Passo 3: criar a versão rolling da função O argumento window controla o tamanho da janela. O argumento unlist = FALSE garante que os resultados ficarão no formato de lista. Isso é necessário aqui porque nosso output é uma lista com dois objetos: o coeficiente e seu erro padrão.\nroll_get_ar1 \u0026lt;- tibbletime::rollify(.f = get_ar1, window = 60, unlist = FALSE)  Na sequência, usamos a função criada acima para gerar um tibble contendo uma coluna com o coeficiente AR(1) e outra com o erro-padrão. O map é utilizado para extrair os elementos da lista.\ninercia \u0026lt;- ipca_livres %\u0026gt;% dplyr::mutate(out = roll_get_ar1(ipca)) %\u0026gt;% dplyr::filter(!is.na(out)) %\u0026gt;% dplyr::mutate(ar1 = purrr::map_dbl(.x = out, .f = function(x) x$beta), se = purrr::map_dbl(.x = out, .f = function(x) x$se))  Por fim, podemos gerar um gráfico como este abaixo contendo a inércia estimada ao longo do tempo, bem como a significância do coeficiente $ \\pm 1.96 \\times \\text{se} $. Também adicionamos uma curva suavizada (loess) para deixar a trajetória mais comportada.\nVale ressaltar que o modelo SARIMA é bem simples e não controla os efeitos de diversos fatores sobre a inflação \u0026ndash; atividade, câmbio, etc. Portanto, para medir adequadamente o grau de inércia precisaríamos adicionar mais estrutura à especificação.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1597017600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597091410,"objectID":"72beaeecc9f6a2035311173d84ef385e","permalink":"/post/como-obter-rolling-windows-de-maneira-rapida-e-eficiente/","publishdate":"2020-08-10T00:00:00Z","relpermalink":"/post/como-obter-rolling-windows-de-maneira-rapida-e-eficiente/","section":"post","summary":"No post anterior, apresentei uma forma bastante conveniente de generalizar ações dispensando for-loops tradicionais. A abordagem permite eliminar indexações trabalhosas e organizar os objetos de maneira bem prática.\nOutra tarefa muito presente no dia-a-dia de quem trabalha com dados é obter versões em janela móvel para alguma função. O exemplo mais simples seria a média móvel, a qual conta com implementações eficientes em diversos pacotes \u0026ndash; eu recomendo o RcppRoll que, além da média móvel, também computa outras estatísticas.","tags":["rolling window","rolling","rstats"],"title":"Como obter rolling windows de maneira rápida e eficiente","type":"post"},{"authors":null,"categories":["Data Science","Previsão"],"content":" É muito comum no dia-a-dia precisarmos generalizar alguma ação sobre diversos conjuntos de dados. Por exemplo, quando desenvolvemos uma especificação para um modelo e queremos ajustá-la sobre várias unidades diferentes. Uma maneira eficiente de pensar essa tarefa é considerar dois objetos.\nO primeiro é uma função que realiza todas as ações pretendidas de forma genérica. O segundo é uma lista cujos elementos correspondem ao conjunto de informações referente a cada unidade. No fim das contas, o objetivo será aplicar a função a cada um dos elementos da lista.\nExistem algumas formas de alcançar este objetivo, seja através de loops convencionais ou usando as variações da família apply. O conjunto de pacotes tidyverse fornece uma solução bem elegante e prática através das funções nest e map.\nImagine que precisamos projetar a Produção Industrial (PIM-PF/IBGE) para todas as UF\u0026rsquo;s disponíveis na pesquisa do IBGE. Como seria?\nPasso 1: carregar pacotes e importar os dados Para importar os dados, vamos acessar a API do IBGE através do pacote sidrar.\nlibrary(sidrar) library(tidyverse) library(fable) library(tsibble) dados_pim \u0026lt;- \u0026quot;/t/3653/n3/all/v/3135/p/all/c544/129314/d/v3135%201\u0026quot; pim_ibge \u0026lt;- sidrar::get_sidra(api = dados_pim) pim_ibge \u0026lt;- pim_ibge %\u0026gt;% dplyr::select(date = `Mês (Código)`, uf = `Unidade da Federação`, valor = Valor) %\u0026gt;% dplyr::mutate(date = lubridate::ymd(paste0(date, \u0026quot;01\u0026quot;)))  Passo 2: colocar os dados no formato nest pim_ibge_nest \u0026lt;- pim_ibge %\u0026gt;% dplyr::group_by(uf) %\u0026gt;% tidyr::nest() pim_ibge_nest  ## # A tibble: 14 x 2 ## # Groups: uf [14] ## uf data ## \u0026lt;chr\u0026gt; \u0026lt;list\u0026gt; ## 1 Amazonas \u0026lt;tibble [221 × 2]\u0026gt; ## 2 Pará \u0026lt;tibble [221 × 2]\u0026gt; ## 3 Ceará \u0026lt;tibble [221 × 2]\u0026gt; ## 4 Pernambuco \u0026lt;tibble [221 × 2]\u0026gt; ## 5 Bahia \u0026lt;tibble [221 × 2]\u0026gt; ## 6 Minas Gerais \u0026lt;tibble [221 × 2]\u0026gt; ## 7 Espírito Santo \u0026lt;tibble [221 × 2]\u0026gt; ## 8 Rio de Janeiro \u0026lt;tibble [221 × 2]\u0026gt; ## 9 São Paulo \u0026lt;tibble [221 × 2]\u0026gt; ## 10 Paraná \u0026lt;tibble [221 × 2]\u0026gt; ## 11 Santa Catarina \u0026lt;tibble [221 × 2]\u0026gt; ## 12 Rio Grande do Sul \u0026lt;tibble [221 × 2]\u0026gt; ## 13 Mato Grosso \u0026lt;tibble [221 × 2]\u0026gt; ## 14 Goiás \u0026lt;tibble [221 × 2]\u0026gt;  Repare no tibble criado pela função nest. Diferente das estruturas convencionais, ele permite armazenar objetos dentro das células \u0026ndash; aqui serão os tibble\u0026rsquo;s contendo os dados para cada UF. Na prática, isso funciona como uma lista sobre a qual podemos usar o map para aplicar a nossa função.\nVale ressaltar que seria equivalente utilizar uma lista. Para isso, poderíamos recorrer à função dlply do pacote plyr conforme apresentado a seguir. A vantagem do formato nest é que você pode ir adicionando novas colunas com outras transformações aos dados sem a necessidade de criar novos objetos.\nlibrary(plyr) pim_ibge_list \u0026lt;- pim_ibge %\u0026gt;% plyr::dlply(.variables = \u0026quot;uf\u0026quot;)  Passo 3: criar a função Nossa função não precisa ser tão geral neste caso, dado que os nomes das colunas são iguais para todas as UF\u0026rsquo;s \u0026ndash; date e valor \u0026ndash; e o modelo também será o mesmo. Basicamente, a ação aqui é pegar o argumento x que será um tibble e retornar as projeções de 1 a 6 períodos à frente utilizando um ARIMA.\nfc_arima \u0026lt;- function(x){ x %\u0026gt;% dplyr::mutate(date = tsibble::yearmonth(date)) %\u0026gt;% as_tsibble() %\u0026gt;% model(modelo = ARIMA(valor)) %\u0026gt;% forecast(h = 6) }  Passo 4: estimar os modelos De posse dos dados devidamente segmentados e da função, podemos usar a função map para finalizar o trabalho.\npim_ibge_modelo \u0026lt;- pim_ibge_nest %\u0026gt;% dplyr::mutate(modelos = purrr::map(.x = data, .f = fc_arima)) pim_ibge_modelo  ## # A tibble: 14 x 3 ## # Groups: uf [14] ## uf data modelos ## \u0026lt;chr\u0026gt; \u0026lt;list\u0026gt; \u0026lt;list\u0026gt; ## 1 Amazonas \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 2 Pará \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 3 Ceará \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 4 Pernambuco \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 5 Bahia \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 6 Minas Gerais \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 7 Espírito Santo \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 8 Rio de Janeiro \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 9 São Paulo \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 10 Paraná \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 11 Santa Catarina \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 12 Rio Grande do Sul \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 13 Mato Grosso \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt; ## 14 Goiás \u0026lt;tibble [221 × 2]\u0026gt; \u0026lt;fable [6 × 4]\u0026gt;  Cada célula da coluna modelos contém o resultado da função, isto é, as informações sobre a distribuição das projeções para cada UF. Isto permite acessar tais informações como se fossem uma lista e, por exemplo, plotar gráficos como estes abaixo.\nPara funções com mais de um argumento, a função map dispõe de variantes: map2 para dois argumentos e pmap para múltiplos argumentos. Também seria factível usar um modelo para cada UF. O ponto aqui era mostrar que a abordagem função + lista elimina em grande medida repetições desnecessárias de código, além da facilidade em escalar o trabalho apenas adicionando novos elementos à lista.\n","date":1596067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596050293,"objectID":"340984bc2b1dc03634c18163762320b5","permalink":"/post/como-generalizar-acoes-de-maneira-eficiente/","publishdate":"2020-07-30T00:00:00Z","relpermalink":"/post/como-generalizar-acoes-de-maneira-eficiente/","section":"post","summary":"É muito comum no dia-a-dia precisarmos generalizar alguma ação sobre diversos conjuntos de dados. Por exemplo, quando desenvolvemos uma especificação para um modelo e queremos ajustá-la sobre várias unidades diferentes. Uma maneira eficiente de pensar essa tarefa é considerar dois objetos.\nO primeiro é uma função que realiza todas as ações pretendidas de forma genérica. O segundo é uma lista cujos elementos correspondem ao conjunto de informações referente a cada unidade.","tags":["loops","map","nest"],"title":"Como generalizar ações de maneira eficiente","type":"post"},{"authors":null,"categories":["Data Science","Previsão"],"content":" Quem realiza projeções deve manter seus resultados armazenados, de modo que seja possível recuperá-los a qualquer momento. Isso permite, por exemplo, acompanhar o desempenho do modelo ao longo do tempo.\nA tarefa pode ser feita em dois passos. Primeiro, criar um tibble com três colunas: a data na qual as projeções foram geradas; a data para a qual as projeções foram feitas; e, por fim, os valores (ou distribuição) projetados. É possível também adicionar informações extras, como a especificação do modelo utilizado \u0026ndash; caso este seja atualizado regularmente.\nO segundo passo é armazenar fisicamente a informação para que seja possível acessá-la mais tarde. Aqui, eu prefiro utilizar o objeto RDS \u0026ndash; que é, basicamente, a estrutura para armazenagem de objetos do R. Uma boa ideia neste caso é exportar um arquivo RDS contendo o tibble a cada nova rodada de projeções e mantê-los em uma pasta.\nVamos a um exemplo prático de como fazer isso. Para utilizar um contexto atual, vamos assumir que nosso objetivo seja projetar todos os dias o número de novos casos de Covid-19 no Brasil para os próximos 7 dias a partir de um modelo univariado bem simples \u0026ndash; um ETS automático do pacote fable (a versão tidy do pacote forecast). Os dados são importados do repositório público do Wesley Cota (https://github.com/wcota/covid19br/).\nPasso 1: carregar pacotes e obter os dados library(tidyverse) library(lubridate) library(fable) library(tsibble) dados_url \u0026lt;- \u0026quot;https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-states.csv\u0026quot; dadosBR \u0026lt;- readr::read_csv(dados_url) %\u0026gt;% dplyr::filter(country == \u0026quot;Brazil\u0026quot;, state == \u0026quot;TOTAL\u0026quot;, date \u0026gt;= max(date) %m-% days(60)) %\u0026gt;% dplyr::select(date, newCases) tail(dadosBR, 3)  ## # A tibble: 3 x 2 ## date newCases ## \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; ## 1 2020-07-21 46927 ## 2 2020-07-22 62943 ## 3 2020-07-23 56111  Passo 2: ajustar o modelo ETS, realizar as projeções e salvar objeto RDS proj \u0026lt;- dadosBR %\u0026gt;% as_tsibble() %\u0026gt;% model(ets = ETS(newCases)) %\u0026gt;% forecast(h = \u0026quot;7 days\u0026quot;) %\u0026gt;% dplyr::mutate(dateFrom = max(dadosBR$date)) tail(proj, 3)  ## # A fable: 3 x 5 [1D] ## # Key: .model [1] ## .model date newCases .distribution dateFrom ## \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dist\u0026gt; \u0026lt;date\u0026gt; ## 1 ets 2020-07-28 46116. N(46116, 7.8e+07) 2020-07-23 ## 2 ets 2020-07-29 47461. N(47461, 8.2e+07) 2020-07-23 ## 3 ets 2020-07-30 47584. N(47584, 8.3e+07) 2020-07-23  Em seguida, basta salvar o objeto. Uma boa ideia é incluir alguma referência no nome do arquivo: a data em que foram geradas as projeções ou a data da última observação disponível, por exemplo.\nsaveRDS(proj, paste0(\u0026quot;tracking/forecast_\u0026quot;, unique(proj$dateFrom), \u0026quot;.rds\u0026quot;))  Para termos uma noção do que seria o resultado ao longo de um período maior, reproduzi a ação anterior por um período de 30 dias. Assim, existem na pasta 30 arquivos .rds correspondendo à trajetória de projeção gerada em cada um dos 30 dias. Esses arquivos podem ser importados de uma só vez \u0026ndash; utilizando como identificador um padrão do nome ou simplesmente a extensão \u0026ndash; e empilhados para produzir as análises.\nproj_labs \u0026lt;- list.files(\u0026quot;tracking/\u0026quot;)[str_detect(list.files(\u0026quot;tracking/\u0026quot;), \u0026quot;.rds\u0026quot;)] proj_files \u0026lt;- purrr::map_dfr(.x = proj_labs, .f = function(x) readRDS(paste0(\u0026quot;tracking/\u0026quot;, x)))  Para finalizar, devemos adicionar os dados que foram realizados. Isto pode ser feito dando um join com o nosso objeto dadosBR, utilizando a coluna de data como identificador. Para que o tibble fique mais claro, vamos renomear a coluna.\nproj_tracking \u0026lt;- dplyr::left_join( proj_files %\u0026gt;% as_tibble() %\u0026gt;% dplyr::rename(\u0026quot;previsto\u0026quot; = \u0026quot;newCases\u0026quot;), dadosBR %\u0026gt;% dplyr::rename(\u0026quot;realizado\u0026quot; = \u0026quot;newCases\u0026quot;) )  Podemos utilizar proj_tracking de diversas formas para acompanhar o desempenho do nosso modelo. O gráfico abaixo, por exemplo, traz a evolução das projeções um passo à frente. Apesar de o modelo não ser tão aderente à magnitude, ele é capaz de capturar a sazonalidade da série. Vale lembrar que o modelo utilizado é bem simples e serve apenas para ilustração.\nPor fim, também podemos utilizar os dados gerados anteriormente para computar métricas de acurácia para cada horizonte de previsão. Para isso, vamos utilizar a função mape do pacote yardstick para obter o erro absoluto percentual médio (MAPE). O pacote conta com diversas outras métricas conhecidas: rmse, mae, mase, etc.\nlibrary(yardstick) proj_acc \u0026lt;- proj_tracking %\u0026gt;% dplyr::group_by(dateFrom) %\u0026gt;% dplyr::mutate(step_ahead = 1:n()) %\u0026gt;% dplyr::group_by(step_ahead) %\u0026gt;% yardstick::mape(truth = realizado, estimate = previsto, na.rm = TRUE)  Aviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1595462400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595462400,"objectID":"0fc1873b06ee105d7c44071f07dcb88f","permalink":"/post/como-fazer-um-tracking-eficiente-das-suas-projecoes/","publishdate":"2020-07-23T00:00:00Z","relpermalink":"/post/como-fazer-um-tracking-eficiente-das-suas-projecoes/","section":"post","summary":"Quem realiza projeções deve manter seus resultados armazenados, de modo que seja possível recuperá-los a qualquer momento. Isso permite, por exemplo, acompanhar o desempenho do modelo ao longo do tempo.\nA tarefa pode ser feita em dois passos. Primeiro, criar um tibble com três colunas: a data na qual as projeções foram geradas; a data para a qual as projeções foram feitas; e, por fim, os valores (ou distribuição) projetados.","tags":["Previsão","tracking"],"title":"Como fazer um tracking eficiente das suas projeções","type":"post"},{"authors":[],"categories":["Data Science"],"content":"Imagine que você tenha uma base de dados com dezenas (ou centenas) de variáveis e quer criar os lags de 1 a 5 para cada uma destas variáveis. Além disso, precisa adicionar dummies mensais para controlar algum fator sazonal. Esta tarefa faz parte do dia-a-dia de quem trabalha com modelos econométricos/machine learning e ter uma forma prática ajuda bastante.\nExistem algumas formas de resolver esse problema. Uma bem simples e prática envolve o tidyr, pacote do tidyverse dedicado à manipulação de frames. Suas principais funções são pivot_longer e pivot_wider, usadas para posicionar os dados, respectivamente, em formato long e wide. Fazendo uso correto destas funções e de seus argumentos, é possível resolver o problema de forma muito simples. Então vamos lá!\nPara começar, vou criar uma frame artificial contendo uma coluna com datas mensais e três colunas representando diferentes variáveis \u0026ndash; var1, var2 e var3. Lembrando que a abordagem é geral o suficiente para acomodar qualquer número de variáveis.\nlibrary(tidyverse) library(lubridate) set.seed(123) df \u0026lt;- tibble(data = seq(ymd(\u0026quot;2019-01-01\u0026quot;), ymd(\u0026quot;2020-07-01\u0026quot;), by = \u0026quot;month\u0026quot;), var1 = rnorm(19), var2 = rnorm(19), var3 = rnorm(19)) tail(df, 5)  ## # A tibble: 5 x 4 ## data var1 var2 var3 ## \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 2020-03-01 -0.556 0.878 -0.0429 ## 2 2020-04-01 1.79 0.822 1.37 ## 3 2020-05-01 0.498 0.689 -0.226 ## 4 2020-06-01 -1.97 0.554 1.52 ## 5 2020-07-01 0.701 -0.0619 -1.55  De início, vamos criar as dummies sazonais. O primeiro passo é criar uma coluna com os meses da coluna de datas. A função month do pacote lubridate fornece uma forma conveniente para isso. Em seguida, criamos uma coluna com valores iguais a 1 \u0026ndash; isso ficará mais claro adiante e os nomes das colunas não importam. Por fim, recorremos à função pivot_wider. Transpondo a coluna dos meses e preenchendo com os 1\u0026rsquo;s, obteríamos um frame no qual cada mês é uma coluna onde o valor é igual a 1 para o mês correspondente na coluna data e NA nos demais. Como nosso objetivo é ter 0\u0026rsquo;s no lugar desses NA, usamos o argumento values_fill.\ndf_seasonal \u0026lt;- df %\u0026gt;% mutate(meses = month(data, label = T, abbr = T), um = 1) %\u0026gt;% pivot_wider(names_from = meses, values_from = um, values_fill = list(um = 0)) tail(df_seasonal, 5)  ## # A tibble: 5 x 16 ## data var1 var2 var3 jan fev mar abr mai jun jul ## \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 2020-03-01 -0.556 0.878 -0.0429 0 0 1 0 0 0 0 ## 2 2020-04-01 1.79 0.822 1.37 0 0 0 1 0 0 0 ## 3 2020-05-01 0.498 0.689 -0.226 0 0 0 0 1 0 0 ## 4 2020-06-01 -1.97 0.554 1.52 0 0 0 0 0 1 0 ## 5 2020-07-01 0.701 -0.0619 -1.55 0 0 0 0 0 0 1 ## # … with 5 more variables: ago \u0026lt;dbl\u0026gt;, set \u0026lt;dbl\u0026gt;, out \u0026lt;dbl\u0026gt;, nov \u0026lt;dbl\u0026gt;, ## # dez \u0026lt;dbl\u0026gt;  Agora vamos criar os lags das variáveis. Aqui a gente vai usar tanto a pivot_longer como pivot_wider. O primeiro passo é deixar o frame no formato long, isto é, as variáveis serão empilhadas em uma única coluna que eu chamarei de \u0026ldquo;var\u0026rdquo;. Os valores ficarão na coluna \u0026ldquo;l0\u0026rdquo; que denota o lag 0.\nNa sequência, vamos criar colunas com os lags desejados: 1 a 5. Essas colunas também precisarão ser colocadas no formato long. Finalmente, vamos expandir o frame (formato wider) reunindo as duas colunas: \u0026ldquo;var\u0026rdquo; e \u0026ldquo;lags\u0026rdquo;. Isto produzirá o resultado desejado. O group_by e arrange são utilizados para garantir a ordem temporal dos dados.\ndf_lags \u0026lt;- df %\u0026gt;% pivot_longer(-\u0026quot;data\u0026quot;, names_to = \u0026quot;var\u0026quot;, values_to = \u0026quot;l0\u0026quot;) %\u0026gt;% group_by(var) %\u0026gt;% arrange(data) %\u0026gt;% mutate(l1 = lag(l0, 1), l2 = lag(l0, 2), l3 = lag(l0, 3), l4 = lag(l0, 4), l5 = lag(l0, 5)) %\u0026gt;% pivot_longer(-c(data, var), names_to = \u0026quot;lag\u0026quot;, values_to = \u0026quot;valor\u0026quot;) %\u0026gt;% pivot_wider(names_from = c(\u0026quot;var\u0026quot;, \u0026quot;lag\u0026quot;), values_from = \u0026quot;valor\u0026quot;) tail(df_lags, 5)  ## # A tibble: 5 x 19 ## data var1_l0 var1_l1 var1_l2 var1_l3 var1_l4 var1_l5 var2_l0 var2_l1 ## \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 2020-03-01 -0.556 0.111 0.401 0.360 1.22 -0.446 0.878 0.895 ## 2 2020-04-01 1.79 -0.556 0.111 0.401 0.360 1.22 0.822 0.878 ## 3 2020-05-01 0.498 1.79 -0.556 0.111 0.401 0.360 0.689 0.822 ## 4 2020-06-01 -1.97 0.498 1.79 -0.556 0.111 0.401 0.554 0.689 ## 5 2020-07-01 0.701 -1.97 0.498 1.79 -0.556 0.111 -0.0619 0.554 ## # … with 10 more variables: var2_l2 \u0026lt;dbl\u0026gt;, var2_l3 \u0026lt;dbl\u0026gt;, var2_l4 \u0026lt;dbl\u0026gt;, ## # var2_l5 \u0026lt;dbl\u0026gt;, var3_l0 \u0026lt;dbl\u0026gt;, var3_l1 \u0026lt;dbl\u0026gt;, var3_l2 \u0026lt;dbl\u0026gt;, var3_l3 \u0026lt;dbl\u0026gt;, ## # var3_l4 \u0026lt;dbl\u0026gt;, var3_l5 \u0026lt;dbl\u0026gt;  A grande vantagem desta abordagem é não precisar escrever o nome das variáveis para criar os lags \u0026ndash; lembrem-se de que elas podem ser dezenas ou centenas. Adicionalmente, não precisamos criar funções auxiliares ou recorrer à geração dinâmica de variáveis \u0026ndash; o que no contexto do tidyverse envolve algum tipo de Non-Standard Evaluation \u0026ndash; nem sempre tão simples para quem tá começando.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1594166400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594252613,"objectID":"d420239dcff19c4e8e6a397b289052e7","permalink":"/post/usando-tidyr-pivot-para-criar-dummies-e-lags/","publishdate":"2020-07-08T00:00:00Z","relpermalink":"/post/usando-tidyr-pivot-para-criar-dummies-e-lags/","section":"post","summary":"Imagine que você tenha uma base de dados com dezenas (ou centenas) de variáveis e quer criar os lags de 1 a 5 para cada uma destas variáveis. Além disso, precisa adicionar dummies mensais para controlar algum fator sazonal. Esta tarefa faz parte do dia-a-dia de quem trabalha com modelos econométricos/machine learning e ter uma forma prática ajuda bastante.\nExistem algumas formas de resolver esse problema. Uma bem simples e prática envolve o tidyr, pacote do tidyverse dedicado à manipulação de frames.","tags":["tidyverse","tidyr","lags","dummies","rstats"],"title":"Usando tidyr para criar dummies e lags","type":"post"},{"authors":[],"categories":["Previsão"],"content":"No post \u0026ldquo;Combinando modelos de previsão\u0026rdquo;, apresentei duas formas simples de combinar modelos de previsão. A primeira delas envolvia obter uma combinação linear das previsões individuais de cada modelo, através de um método de otimização (OLS, por exemplo, ou equivalente). O segundo método utilizava a mediana das projeções dos modelos individuais. Embora operacionalmente mais simples, esta última abordagem performou melhor que a anterior \u0026ndash; um resultado nada surpreendente, pois existe literatura mostrando que é mesmo difícil obter resultados melhores que a combinação por mediana daqueles modelos empregados.\nCombinação de modelos tornou-se um novo paradigma em previsões. Conforme citado naquele post:\n[\u0026hellip;] a estratégia parece ter definido um novo padrão no campo de previsões uma vez que 12 dos 17 modelos mais acurados na competição M4 foram combinações.\nNa ocasião, mencionei também que haviam formas mais sofisticadas de combinar modelos. Segue a passagem:\n[\u0026hellip;] Métodos mais sofisticados permitem, por exemplo, mudanças no valor dos parâmetros ao longo do tempo e até mesmo a utilização de algoritmos de Machine Learning para aprender o valor destes parâmetros.\nO post de hoje busca justamente isso: utilizar uma rede neural para combinar modelos. Para isto, vamos utilizar aqueles mesmos quatro modelos: CES, ETS, DOTM e ARIMA. Entretanto, optei desta vez por utilizar a série temporal do índice VIX, divulgado pelo CBOE (Chicago Board Options Exchange). Para os menos familiarizados, o índice VIX busca medir a volatilidade esperada na bolsa americana. A escolha da série, dentre outros motivos, justifica-se por seu tamanho: 355 observações mensais. Sabe-se que redes neurais são data hungry, logo séries curtas podem não apresentar bons resultados. A principal vantagem de utilizar uma rede neural para aprender qual a melhor forma de combinar os modelos é sua flexibilidade, isto é, os pesos atribuídos a cada modelo poderá ser uma função não-linear, potencialmente complexa.\nEntendido o objetivo, vamos iniciar o exercício. De modo a poder contar com um número maior de observações, criei a amostra da seguinte forma:\n Computei as projeções um-passo-à-frente de cada modelo através de validação-cruzada. Utilizando uma janela móvel de 100 observações para as projeções, obtive um total próximo a 250 previsões (fora da amostra).\n Desta amostra, separei cerca de 70% para treino e 30% para teste. A amostra de treino foi utilizada para calcular os pesos por OLS e também para treinar a Rede Neural. A combinação por mediana foi calculada diretamente sobre a amostra de teste, pois não envolve nenhuma estimativa de parâmetros.\n Por fim, foram computados o Mean Squared Error (MSE) de todos os métodos.\n  Os resultados seguem abaixo. Diferente dos resultados do post anterior, a mediana não foi capaz de superar todos os modelos individuais. Isto, provavelmente, é consequência de existirem dois modelos cujas performances se distanciam bastante dos demais \u0026ndash; ARIMA e CES.\n   modelo MSE     dotm 9.041486   ets 9.090884   mediana 9.110720   arima 9.358005   ces 10.519399    A combinação, por sua vez, também não foi capaz de entregar resultados superiores. Em outras palavras, na presença de modelos ruins, métodos mais convencionais de combinação tendem a não performar muito bem.\n   modelo MSE     dotm 9.041486   ets 9.090884   mediana 9.110720   combinação 9.175815   arima 9.358005   ces 10.519399    E o que dizer da combinação através da rede neural? Antes de apresentar o resultado, vou descrever um pouco melhor a especificação utilizada. A rede neural usada aqui é do tipo feed forward, com quatro layers contendo 16 units cada. As funções de ativação dos três primeiros layers é relu, enquanto a do último é linear. No total, foram treinados 641 parâmetros. A combinação através da rede neural retornou um MSE de 4.49, cerca de metade daquele reportado pelo melhor modelo individual \u0026ndash; DOTM. O resultado é muito bom, mas valem alguns avisos. O primeiro é usual, mas nunca demais repetir: não necessariamente este aumento de performance vai acontecer para qualquer série. O segundo é mais específico: o treinamento de redes neurais envolve alguns processos estocásticos, de modo que pode ocorrer instabilidade nos parâmetros estimados e, portanto, sobre a própria acurácia do modelo. Uma solução seria treinar a rede neural um grande número de vezes e reportar a acurácia mediana. Obviamente isto envolve um grande custo operacional.\nO que chama mais atenção nos resultados é a capacidade da rede neural em evitar as projeções mais acentuadas para baixo. Note que em diversos casos isto faz com que a projeção se distancie muito do valor realizado. A princípio, tudo indica que a rede neural foi capaz de aprender a não dar muito peso para o modelo (ou os modelos) com essa tendência de subestimar demais a série em certos momentos. Adicionalmente, a combinação através da rede neural também não superestima demais alguns valores. Em suma, parece que em situações mais usuais ambos os métodos são razoáveis. Porém, na presença de desvios mais acentuados, a rede neural é capaz de entregar resultados mais próximos do observado. Essa é uma virtude importante, sobretudo por se tratar de uma série que mede volatilidade e, portanto, apresenta regiões mais \u0026ldquo;nervosas\u0026rdquo;. Neste caso, é importante que o modelo não perca a mão quando esse momento aparecer.\nPor fim, uma possível estratégia para melhorar o método de combinação linear ou de mediana seria remover aquele modelo com desempenho muito ruim \u0026ndash; no nosso caso, o CES. Uma generalização desse processo seria estimar diversos (ou todos) subconjuntos de modelos, calcular a acurácia da combinação de cada subconjunto e selecionar aquele com melhor poder preditivo. Talvez possamos abordar isso numa próxima oportunidade.\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1565308800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567978998,"objectID":"cecc546a2ebf9f9b56cbdbe1bc828ab8","permalink":"/post/utilizando-redes-neurais-para-combinar-modelos/","publishdate":"2019-08-09T00:00:00Z","relpermalink":"/post/utilizando-redes-neurais-para-combinar-modelos/","section":"post","summary":"No post \u0026ldquo;Combinando modelos de previsão\u0026rdquo;, apresentei duas formas simples de combinar modelos de previsão. A primeira delas envolvia obter uma combinação linear das previsões individuais de cada modelo, através de um método de otimização (OLS, por exemplo, ou equivalente). O segundo método utilizava a mediana das projeções dos modelos individuais. Embora operacionalmente mais simples, esta última abordagem performou melhor que a anterior \u0026ndash; um resultado nada surpreendente, pois existe literatura mostrando que é mesmo difícil obter resultados melhores que a combinação por mediana daqueles modelos empregados.","tags":["Previsão","Redes neurais","combinação","vix"],"title":"Utilizando redes neurais para combinar modelos","type":"post"},{"authors":[],"categories":["Previsão"],"content":"No post anterior, tratei de estratégias para combinar modelos de previsão a fim de obter melhores resultados. Melhor resultado, naquele contexto, significava apresentar menor Root mean square forecast error (RMSFE).É muito comum \u0026ndash; tanto na literatura como na prática \u0026ndash; utilizar esta medida ou outras semelhantes que envolvam médias dos desvios quadráticos ou absolutos dos erros, por exemplo MSE, MSPE, MASE, MAPE, etc. Sabe-se, contudo, que médias são muito sensíveis a valores extremos. Portanto, um único valor extremo no conjunto de erros de previsão é capaz de elevar de maneira significativa aquelas estatísticas. Dito de outra forma, um modelo relativamente bom pode ser descartado porque apresentou uma única previsão ruim. Por esta razão, ganhou popularidade medidas que substituem a média pela mediana naquelas estatísticas anteriores. Os interessados em entender melhor as características destas medidas podem recorrer ao artigo de Hyndman e Koehler (2006): \u0026ldquo;Another look at measures of forecast accuracy\u0026rdquo;.\nNeste ponto, eu gostaria de chamar atenção para uma coisa muito importante: a estatística de acurácia utilizada para ranquear modelos é uma função-perda e, como tal, reflete o objetivo que se pretende alcançar.Se o objetivo é reter o modelo que, em geral, não apresenta previsões muito distantes das realizações, as medidas consideradas até agora são razoáveis. Por outro lado, imagine que a previsão seja para o estoque de uma empresa ou para uma variável que define uma posição de investimento. Nestes casos, o risco da previsão importa.Em outras palavras, pode não fazer muito sentido escolher um modelo que, apesar de ter bom desempenho na média/mediana, apresenta maiores chances de valores extremos. No caso da empresa, tanto o excesso quanto a falta de estoque em níveis elevados pode comprometer as operações; igualmente catastrófico pode ser a realização muito abaixo/acima do previsto para uma variável-chave para o investidor. Para usar um exemplo real, vamos considerar a mesma variável utilizada no post anterior: o núcleo do IPCA EX-3. A amostra vai de julho de 2006 a maio de 2019 e contém 155 observações. Os modelos utilizados foram ARIMA, ETS, CES e DOTM \u0026ndash; todos vistos naquela ocasião \u0026ndash; e os erros de previsão um passo à frente computados a partir de validação-cruzada com uma janela móvel de 60 observações \u0026ndash; o que totalizou cerca de 95 pontos de erro para cada modelo. As densidades dos erros de previsão para cada modelo são apresentadas abaixo: De modo geral, todas as distribuições apresentam maior ocorrência em torno do zero, o que sugere que medidas que computam a tendência central devem ter desempenho mais ou menos parecido. Porém, cabe notar que a cauda das distribuições têm formatos bem diferentes: os erros do modelo ETS têm a cauda da direita maior que a do modelo DOTM e CES, por exemplo. É justamente neste aspecto que reside a ideia de risco: a probabilidade de eventos extremos é maior ou menor de acordo com a área destas caudas. Para traduzir isso de forma mais objetiva, o gráfico abaixo traz três medidas: duas de tendência central \u0026ndash; Root mean square forecast error (RMSFE) e Root median square forecast error (RMedSFE) \u0026ndash; e uma de risco: os limites da área com probabilidade de 10% à direita e à esquerda \u0026ndash; esta última em valor absoluto para ficar mais fácil de visualizar com as demais.\nO primeiro ponto a notar é que existe diferença na classificação quando consideramos a média ou a mediana. Pelo RMSFE, a escolha seria pelo DOTM, ao passo que pelo RMedSFE o modelo escolhido seria o CES. Por outro lado, se quiséssemos reduzir as chances de valores extremos \u0026ndash; tanto para cima quanto para baixo \u0026ndash; o DOTM seria a escolha inequívoca. Fica claro, portanto, a relevância de utilizar medidas aderentes aos objetivos da previsão. Adicionalmente, é sempre uma boa ideia comparar medidas alternativas para cada objetivo.\nPor fim, uma questão interessante que se coloca é: não é possível ter uma única medida capaz de sumarizar tanto a acurácia como o risco em um modelo de previsão? A resposta parece ser positiva. No artigo Tales from tails: On the empirical distributions of forecasting errors and their implication to risk, os autores propõem uma medida chamada Risk measure (RM). A ideia é relativamente simples: aplica-se uma transformação do tipo Box-Cox sobre a distribuição dos erros de previsão a fim de normalizá-los e em seguida calcula-se a medida que é a soma da média com o desvio-padrão da distribuição transformada. Ao fim, a transformação é revertida. A tabela abaixo computa uma versão da medida RM para os erros de previsão dos modelos (transformados via Box-Cox) em conjunto com o p-valor associado ao teste Shapiro de normalidade.\n   modelo MAE SD RM shapiro_bc     dotm 0.94 0.11 2.03 0.02   ces 1.31 0.26 2.79 0.93   arima 1.41 0.32 3.09 0.06   ets 3.02 1.23 13.48 0.00    O problema é que nem sempre a distribuição transformada é normal. O modelo DOTM apresentou a menor RM, porém os resultados não são significativos uma vez que somente a distribuição dos erros do modelo CES \u0026ndash; e com alguma \u0026ldquo;boa vontade\u0026rdquo; a do ARIMA \u0026ndash; se aproximou de uma distribuição normal. De fato, em termos de p-valor, a distribuição original dos erros apresentou resultados melhores para o teste de normalidade: respectivamente 0.14, 0.15, 0.11 e 0.02. Ainda assim, o ideal seria ter p-valores maiores para dar mais segurança.\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1564358400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567980991,"objectID":"bc1593dcdd3ea99861b3489e98a9725c","permalink":"/post/tales-from-tails-analisando-o-risco-em-previsoes/","publishdate":"2019-07-29T00:00:00Z","relpermalink":"/post/tales-from-tails-analisando-o-risco-em-previsoes/","section":"post","summary":"No post anterior, tratei de estratégias para combinar modelos de previsão a fim de obter melhores resultados. Melhor resultado, naquele contexto, significava apresentar menor Root mean square forecast error (RMSFE).É muito comum \u0026ndash; tanto na literatura como na prática \u0026ndash; utilizar esta medida ou outras semelhantes que envolvam médias dos desvios quadráticos ou absolutos dos erros, por exemplo MSE, MSPE, MASE, MAPE, etc. Sabe-se, contudo, que médias são muito sensíveis a valores extremos.","tags":["Previsão","risco","distribuição","risk measure"],"title":"Tales from tails: analisando o risco em previsões","type":"post"},{"authors":[],"categories":["Previsão"],"content":"Em posts anteriores apresentei algumas metodologias capazes de melhorar previsões. Em particular, falei um pouco sobre bagging — uma técnica que estima um modelo específico sobre variações da série original e, em seguida, computa a média/mediana destas previsões (ver aqui) — e sobre rectify — uma abordagem que considera eventuais informações contidas nos erros de previsão (ver aqui). Em todos os casos considerei apenas um único modelo para realizar as previsões. Porém, com frequência temos à disposição mais de um modelo para a mesma variável. Neste caso, o que fazer?\nUma estratégia muito comum consiste em combinar previsões de diversos modelos. Isso não é novidade e vem sendo explorado desde o paper seminal de Bates e Granger em 1969, “The combination of forecasts“, com resultados bastante promissores. Entretanto, a estratégia parece ter definido um novo padrão no campo de previsões uma vez que 12 dos 17 modelos mais acurados na competição M4 foram combinações. Isto se deve, em grande medida, ao menor risco de repousar exclusivamente em um modelo mal especificado ou com baixa capacidade de adaptação a novos eventos.\nExistem diversas estratégias para combinar previsões. As abordagens mais comuns utilizam alguma medida como média simples/mediana ou fazem uso de alguma combinação linear das previsões, conforme a expressão abaixo:\n\\[ y^{FC}_{t} = \\alpha_1 y_{1,t}^{FC} + \\alpha_2 y_{2,t}^{FC} + ... + \\alpha_k y_{k,t}^{FC} = \\sum_i^k \\alpha_i y_{i,t}^{FC} \\]\nem que $y_{i,t}^{FC}$ é a previsão do modelo $i$ para o período $t$.\nOs pesos, $\\alpha_i$, podem ser definidos de diversas formas. Em geral, considera-se alguma medida do erro de previsão de cada modelo, dando menor peso ao modelo que historicamente errou mais; ou então obtém-se os pesos através da minimização de alguma função perda (RMSFE, MSFE, etc). Métodos mais sofisticados permitem, por exemplo, mudanças no valor dos parâmetros ao longo do tempo e até mesmo a utilização de algoritmos de Machine Learning para aprender o valor destes parâmetros.\nNeste post, vou considerar quatro modelos univariados: ETS, CES (complex exponential smoothing), ARIMA e DOTM (dynamic optimised theta). A primeira abordagem para combinação será computar a mediana das projeções individuais. A escolha conjunta destes modelos e da mediana para combinação não é arbitrária, mas segue a proposta de Petropoulos e Svetunkov (2019, IJF), a qual, embora simples, obteve excelentes resultados. A segunda abordagem para combinação considera os mesmos modelos e pesos $\\alpha_i$ que minimizam o RMSFE (root mean squared forecast error), de acordo com:\n\\[ min_{\\alpha_i} \\frac{\\sum_{t = 1}^{T} ( y_t - \\sum_i^{k} \\alpha_i y_{i,t}^{FC} )^2}{n} \\]\nOs leitores mais familiarizados vão notar que este problema pode ser reduzido à uma regressão linear entre o y observado em $t$ e as projeções de cada um dos modelos para o mesmo $t$. Em especial, ao elevar ao quadrado os resíduos da regressão, calcular a média e extrair a raiz, obteremos o RMSFE. Entretanto, para deixar o tratamento mais geral, vou considerar o problema de otimização acima. Adicionalmente, para que os coeficientes $\\alpha_i$ sejam não-negativos e somem um, vou aplicar uma transformação sobre eles utilizando a função softmax. O objetivo é deixar mais intuitiva a noção de pesos. Portanto, os coeficientes $\\alpha_i$ padronizados serão dados por:\n\\[ \\bar{\\alpha_i} = \\frac{e^{\\alpha_i}}{\\sum_i^k e^{\\alpha_i}} \\]\nPor fim, vamos comparar os resultados dos modelos individuais com aqueles obtidos através das combinações. Antes de começarmos, é preciso chamar atenção para três pontos. Em primeiro lugar, como quase tudo em forecasting, as evidências que apontam vantagem de previsões combinadas sobre as individuais são obtidas ao aplicar o método sobre um grande conjunto de séries. Ou seja, a superioridade dos métodos de combinação vale na média e não necessariamente para todos os casos particulares.\nEm segundo lugar, a combinação de modelos pressupõe que os modelos gerem previsões não-viesadas. Caso contrário, o viés de um dos modelos acaba contaminando a previsão combinada. Por esta razão, incluir uma constante no problema de otimização pode melhorar o resultado, uma vez que captura algum eventual viés.\nPor último, é preciso ter cuidado ao avaliar o poder preditivo dos modelos. No caso da combinação linear, como precisamos gerar previsões para calcular o valor dos pesos $\\alpha_i$, vamos separar uma parte da amostra para validação. Para ficar mais claro, faremos o seguinte:\n A amostra de treino será utilizada para computar as projeções de cada método; O peso de cada método será computado tendo como referência o poder preditivo sobre a amostra de validação; Os pesos obtidos na etapa 2 serão utilizados para combinar as projeções obtidas na amostra de treino ampliada (treino+validação). Estas projeções da etapa 3 serão comparadas com os valores da amostra de teste.  Entendido o exercício, abra o R e acompanhe!\nPasso 1: carregar os pacotes necessários, importar os dados e definir as amostras. Para esta aplicação, vamos utilizar a série do núcleo do IPCA EX-3, calculado pelo BCB (SGS 27839).\n# 1. Carregar bibliotecas library(tidyverse) library(rbcb) # Para instalar: devtools::install_github(\u0026quot;wilsonfreitas/rbcb\u0026quot;) library(forecast) library(smooth) library(forecTheta) library(knitr) # 2. Importar dados dados dados \u0026lt;- rbcb::get_series(list(\u0026quot;ipca_ex3\u0026quot; = 27839), start_date = \u0026quot;2006-07-01\u0026quot;, end_date = \u0026quot;2019-05-01\u0026quot;) dados_ts \u0026lt;- ts(dados$ipca_ex3, start = c(2006,7), freq = 12) # 3. Separar as amostras (cerca de 55% para treino, 30% para validação e 15% para teste) dados_treino \u0026lt;- window(dados_ts, end = c(2013,7)) dados_valida \u0026lt;- window(dados_ts, start = c(2013,8), end = c(2017,5)) dados_teste \u0026lt;- window(dados_ts, start = c(2017,6))  Passo 2: realizar as projeções individuais para cada modelo com horizonte igual ao período de validação. Estes dados serão utilizados para estimar os pesos.\nmodelo_i \u0026lt;- list( \u0026quot;ets\u0026quot; = function(x,h) forecast(ets(x, lambda = \u0026quot;auto\u0026quot;), h = h), \u0026quot;ces\u0026quot; = function(x,h) forecast(smooth::auto.ces(x), h = h), \u0026quot;arima\u0026quot; = function(x,h) forecast(auto.arima(x), h = h), \u0026quot;dotm\u0026quot; = function(x,h) forecTheta::dotm(x, h = h) ) fc_i \u0026lt;- purrr::invoke_map(.f = modelo_i, .x = list(dados_treino), h = length(dados_valida)) fc_i_mean \u0026lt;- purrr::map_dfc(.x = fc_i, .f = function(x) x[[\u0026quot;mean\u0026quot;]]) %\u0026gt;% dplyr::mutate(y_valida = dados_valida)  Passo 3: computar os parâmetros que minimizam a RMSFE e normalizá-los. Aqui, como eram apenas 4 modelos eu abri o somatório para ficar mais claro. Para o caso de um conjunto grande de modelos, o ideal é substituir por uma operação matricial.\nmsfe_comb \u0026lt;- function(x){ alpha_ets \u0026lt;- x[1] alpha_ces \u0026lt;- x[2] alpha_arima \u0026lt;- x[3] alpha_dotm \u0026lt;- x[4] ((fc_i_mean$y_valida - alpha_ets*fc_i_mean$ets - alpha_ces*fc_i_mean$ces - alpha_arima*fc_i_mean$arima - alpha_dotm*fc_i_mean$dotm)^2) %\u0026gt;% mean() %\u0026gt;% sqrt() } pesos \u0026lt;- optim(c(1,1,1,1), msfe_comb) pesos_norm \u0026lt;- round(exp(pesos$par)/sum(exp(pesos$par)), 3)  Passo 4: realizar as projeções combinadas utilizando os parâmetros estimados e a mediana. Em seguida, comparar com as realizações da amostra de teste.\ndados_treino_amplo \u0026lt;- window(dados_ts, end = c(2017,5)) fc_i_amplo \u0026lt;- purrr::invoke_map(.f = modelo_i, .x = list(dados_treino_amplo), h = length(dados_teste)) fc_i_mean_amplo \u0026lt;- purrr::map_dfc(.x = fc_i_amplo, .f = function(x) x[[\u0026quot;mean\u0026quot;]]) %\u0026gt;% dplyr::mutate(\u0026quot;y_teste\u0026quot; = dados_teste) %\u0026gt;% dplyr::rowwise() %\u0026gt;% dplyr::mutate(\u0026quot;Mediana\u0026quot; = median(c(ets,ces,arima,dotm))) %\u0026gt;% dplyr::ungroup() %\u0026gt;% dplyr::mutate(\u0026quot;Otimização\u0026quot; = pesos_norm[1]*ets + pesos_norm[2]*ces + pesos_norm[3]*arima + pesos_norm[4]*dotm) fc_i_acc \u0026lt;- fc_i_mean_amplo %\u0026gt;% dplyr::summarise_at(vars(-y_teste), funs(forecast::accuracy(., y_teste)[, \u0026quot;RMSE\u0026quot;]))  As medidas de acurácia são exibidas na tabela abaixo. A estratégia de combinação através da mediana apresentou o melhor resultado, superando ligeiramente os modelos CES e ETS. A combinação através de otimização, por sua vez, não foi capaz de bater todos os modelos individuais. Mais especificamente, o bom desempenho do modelo arima no período de validação fez com que este recebesse um peso mais elevado. Entretanto, essa vantagem não se materializou no período de teste. Isto reforça a necessidade de reavaliar modelos e estratégias de tempos em tempos, sobretudo quando ocorrem mudanças estruturais na série de interesse -- como foi o caso do IPCA EX-3. Por outro lado, também reforça a capacidade de estratégias que utilizam medidas de tendência menos sensíveis a extremos -- como a mediana -- em responder melhor a ambientes mais incertos.\n   Modelo RMSFE     Mediana 0.121   ces 0.123   ets 0.123   dotm 0.131   Otimização 0.143   arima 0.184    O gráfico abaixo apresenta as observações para o IPCA EX-3 da amostra de teste e as previsões pontuais geradas pelos dois métodos de combinação. Vale ressaltar que uma análise mais rigorosa levaria em conta também a performance para cada horizonte. Também fica claro ao observar o gráfico que os picos e vales mais pronunciados podem ter um papel relevante sobre a magnitude da medida RMSFE. Uma boa prática seria considerar medidas alternativas, sobretudo aquelas mais robustas a este tipo de situação. Pretendo abordar isso em algum momento.\nPor fim, cabe notar que intervalo de confiança nesses casos não é trivial, uma vez que é preciso obter uma expressão para a variância da combinação das previsões, o que requer computar as covariâncias entre os erros dos modelos. Uma solução conservadora é utilizar o intervalo mais amplo dos modelos individuais, porém não me agrada muito. Talvez possamos voltar nesse ponto em uma próxima oportunidade.\nSugestão: Para os interessados em aplicar metodologias de combinação de previsões, existem alguns pacotes disponíveis para R. Dois deles (opera e ForecastHybrid) são tratados neste post do Rob. Hyndman: https://robjhyndman.com/hyndsight/forecast-combinations/\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1562803200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567981614,"objectID":"860545ed8aafc7782f851d97451dbfac","permalink":"/post/combinando-modelos-de-previsao/","publishdate":"2019-07-11T00:00:00Z","relpermalink":"/post/combinando-modelos-de-previsao/","section":"post","summary":"Em posts anteriores apresentei algumas metodologias capazes de melhorar previsões. Em particular, falei um pouco sobre bagging — uma técnica que estima um modelo específico sobre variações da série original e, em seguida, computa a média/mediana destas previsões (ver aqui) — e sobre rectify — uma abordagem que considera eventuais informações contidas nos erros de previsão (ver aqui). Em todos os casos considerei apenas um único modelo para realizar as previsões.","tags":["combinação","Previsão","otimização"],"title":"Combinando modelos de previsão","type":"post"},{"authors":[],"categories":["Previsão"],"content":"O exercício de hoje tem como objetivo apresentar uma técnica com potencial para aprimorar a previsão pontual de uma série, conhecida como bagging (bootstrap aggregating).\nPartindo do pressuposto de que toda série temporal é uma realização específica de um processo estocástico, o que este método faz é gerar outras possíveis realizações (séries) deste mesmo processo gerador. E como isso é feito?\nEm primeiro lugar, a série original é decomposta em tendência, sazonalidade e restante (pense neste último termo como a parte aleatória da série). Este termo restante é submetido a um processo de bootstrap, isto é, ele sofre um processo de re-amostragem. Todavia, como o termo aleatório de uma série temporal pode ser correlacionado no tempo, esta re-amostragem não é feita por observações, mas em blocos — blocked bootstrap. Por fim, estes novos componentes aleatórios obtidos via bootstrap são reintroduzidos aos componentes de tendência e sazonalidade da série original formando novas séries que são variantes dela.\nPara ficar mais claro, considere o gráfico abaixo. A linha preta é a série original da taxa de desocupação medida pela Pnad Contínua Mensal (IBGE). As linhas coloridas são séries calculadas a partir do processo descrito acima. Do ponto de vista estatístico, qualquer uma daquelas séries poderia ter ocorrido, sendo a série “verdadeira” aquela que efetivamente ocorreu.\nOk, entendido até aqui. E agora? Agora, o método consiste em obter as previsões para cada uma das séries e calcular a média das previsões. Você pode estar se perguntando se, de fato, este método melhora o poder preditivo de um modelo. Existem trabalhos que mostram aumento de performance, na média, para alguns modelos. De todo modo, é aconselhável checar se o mesmo é válido para a série e para o modelo que estamos utilizando. Vamos fazer um exemplo?\nAntes de começarmos, uma breve explicação. Utilizaremos a função bld.mbb.bootstrap() do pacote forecast para calcular as séries via bootstrap, conforme o gráfico acima. O resultado será um objeto do tipo lista com as séries geradas. Em seguida, vamos utilizar a função map() do pacote purrr para gerar previsões para cada uma das séries através do auto.arima(), também do pacote forecast. Mas lembre-se que você pode utilizar qualquer modelo que desejar. O pacote forecast tem uma implementação direta através da função baggedModel(), mas eu preferi desagregar o trabalho para deixar mais claro como é feito. Por fim, vamos comparar os erros de previsão (fora da amostra) da série original e da média das séries geradas (bagging).\nPasso 1: carregar pacotes necessários\nlibrary(sidrar) library(tidyverse) library(forecast) library(timetk)  Passo 2: importar a série temporal da PNAD\npnad \u0026lt;- sidrar::get_sidra(api = \u0026quot;/t/6381/n1/all/v/4099/p/all/d/v4099%201\u0026quot;) pnad_ts \u0026lt;- ts(pnad$Valor, start = c(2012,3), freq = 12)  Passo 3: definir amostras de treino e de teste para medir a acurácia das previsões e também o número de séries geradas por bootstrap\npnad_treino \u0026lt;- window(pnad_ts, end = c(2016,7)) pnad_teste \u0026lt;- window(pnad_ts, start = c(2016,8)) k \u0026lt;- 10  Passo 4: computar as séries via bootstrap\npnad_boot \u0026lt;- forecast::bld.mbb.bootstrap(pnad_treino, k) %\u0026gt;% purrr::map(.f = ts, start = c(2012,3), freq = 12)  Passo 5: computar previsões por auto.arima, por bagging\naa_fc \u0026lt;- function(x){forecast(auto.arima(x, max.d = 1), n = 24)[[\u0026quot;mean\u0026quot;]]} pnad_boot_fc \u0026lt;- purrr::map(.x = pnad_boot, .f = aa_fc) ## Computar a previsão pelo método bagging fc_original \u0026lt;- pnad_boot_fc[[1]] fc_bagged \u0026lt;- pnad_boot_fc %\u0026gt;% purrr::reduce(`+`) %\u0026gt;% `/`(k)  Passo 6: comparar a acurácia dos modelos\naccuracy(fc_original, pnad_teste)  ## ME RMSE MAE MPE MAPE ACF1 Theil's U ## Test set -2.362092 3.129262 2.363582 -18.89847 18.9103 0.8906952 10.3499  accuracy(fc_bagged, pnad_teste)  ## ME RMSE MAE MPE MAPE ACF1 ## Test set -1.947639 2.682957 2.013009 -15.56498 16.10364 0.8898631 ## Theil's U ## Test set 8.86905  De fato, como é possível observar, as previsões a partir do método bagging apresentaram desempenho superior.\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1536796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567982589,"objectID":"8d0f09310933df02f103269197ac7015","permalink":"/post/como-aprimorar-previsoes-uma-aplicacao-com-bootstrap/","publishdate":"2018-09-13T00:00:00Z","relpermalink":"/post/como-aprimorar-previsoes-uma-aplicacao-com-bootstrap/","section":"post","summary":"O exercício de hoje tem como objetivo apresentar uma técnica com potencial para aprimorar a previsão pontual de uma série, conhecida como bagging (bootstrap aggregating).\nPartindo do pressuposto de que toda série temporal é uma realização específica de um processo estocástico, o que este método faz é gerar outras possíveis realizações (séries) deste mesmo processo gerador. E como isso é feito?\nEm primeiro lugar, a série original é decomposta em tendência, sazonalidade e restante (pense neste último termo como a parte aleatória da série).","tags":["Previsão","bagging","bootstrap"],"title":"Como aprimorar previsões: uma aplicação com bootstrap","type":"post"}]