[{"authors":["admin"],"categories":null,"content":"Mestre em Economia com experiência na elaboração de modelos econométricos, previsão de séries temporais e programação em linguagem R. Trabalhou como pesquisador no IBRE/FGV e na CODEPLAN/DF. Atualmente é analista de pesquisa quantitativa na Itaú Asset Management.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Mestre em Economia com experiência na elaboração de modelos econométricos, previsão de séries temporais e programação em linguagem R. Trabalhou como pesquisador no IBRE/FGV e na CODEPLAN/DF. Atualmente é analista de pesquisa quantitativa na Itaú Asset Management.","tags":null,"title":"J. Renato Leripio","type":"authors"},{"authors":[],"categories":["Previsão"],"content":"No post \u0026ldquo;Combinando modelos de previsão\u0026rdquo;, apresentei duas formas simples de combinar modelos de previsão. A primeira delas envolvia obter uma combinação linear das previsões individuais de cada modelo, através de um método de otimização (OLS, por exemplo, ou equivalente). O segundo método utilizava a mediana das projeções dos modelos individuais. Embora operacionalmente mais simples, esta última abordagem performou melhor que a anterior \u0026ndash; um resultado nada surpreendente, pois existe literatura mostrando que é mesmo difícil obter resultados melhores que a combinação por mediana daqueles modelos empregados.\nCombinação de modelos tornou-se um novo paradigma em previsões. Conforme citado naquele post:\n[\u0026hellip;] a estratégia parece ter definido um novo padrão no campo de previsões uma vez que 12 dos 17 modelos mais acurados na competição M4 foram combinações.\nNa ocasião, mencionei também que haviam formas mais sofisticadas de combinar modelos. Segue a passagem:\n[\u0026hellip;] Métodos mais sofisticados permitem, por exemplo, mudanças no valor dos parâmetros ao longo do tempo e até mesmo a utilização de algoritmos de Machine Learning para aprender o valor destes parâmetros.\nO post de hoje busca justamente isso: utilizar uma rede neural para combinar modelos. Para isto, vamos utilizar aqueles mesmos quatro modelos: CES, ETS, DOTM e ARIMA. Entretanto, optei desta vez por utilizar a série temporal do índice VIX, divulgado pelo CBOE (Chicago Board Options Exchange). Para os menos familiarizados, o índice VIX busca medir a volatilidade esperada na bolsa americana. A escolha da série, dentre outros motivos, justifica-se por seu tamanho: 355 observações mensais. Sabe-se que redes neurais são data hungry, logo séries curtas podem não apresentar bons resultados. A principal vantagem de utilizar uma rede neural para aprender qual a melhor forma de combinar os modelos é sua flexibilidade, isto é, os pesos atribuídos a cada modelo poderá ser uma função não-linear, potencialmente complexa.\nEntendido o objetivo, vamos iniciar o exercício. De modo a poder contar com um número maior de observações, criei a amostra da seguinte forma:\n Computei as projeções um-passo-à-frente de cada modelo através de validação-cruzada. Utilizando uma janela móvel de 100 observações para as projeções, obtive um total próximo a 250 previsões (fora da amostra).\n Desta amostra, separei cerca de 70% para treino e 30% para teste. A amostra de treino foi utilizada para calcular os pesos por OLS e também para treinar a Rede Neural. A combinação por mediana foi calculada diretamente sobre a amostra de teste, pois não envolve nenhuma estimativa de parâmetros.\n Por fim, foram computados o Mean Squared Error (MSE) de todos os métodos.\n  Os resultados seguem abaixo. Diferente dos resultados do post anterior, a mediana não foi capaz de superar todos os modelos individuais. Isto, provavelmente, é consequência de existirem dois modelos cujas performances se distanciam bastante dos demais \u0026ndash; ARIMA e CES.\n   modelo MSE     dotm 9.041486   ets 9.090884   mediana 9.110720   arima 9.358005   ces 10.519399    A combinação, por sua vez, também não foi capaz de entregar resultados superiores. Em outras palavras, na presença de modelos ruins, métodos mais convencionais de combinação tendem a não performar muito bem.\n   modelo MSE     dotm 9.041486   ets 9.090884   mediana 9.110720   combinação 9.175815   arima 9.358005   ces 10.519399    E o que dizer da combinação através da rede neural? Antes de apresentar o resultado, vou descrever um pouco melhor a especificação utilizada. A rede neural usada aqui é do tipo feed forward, com quatro layers contendo 16 units cada. As funções de ativação dos três primeiros layers é relu, enquanto a do último é linear. No total, foram treinados 641 parâmetros. A combinação através da rede neural retornou um MSE de 4.49, cerca de metade daquele reportado pelo melhor modelo individual \u0026ndash; DOTM. O resultado é muito bom, mas valem alguns avisos. O primeiro é usual, mas nunca demais repetir: não necessariamente este aumento de performance vai acontecer para qualquer série. O segundo é mais específico: o treinamento de redes neurais envolve alguns processos estocásticos, de modo que pode ocorrer instabilidade nos parâmetros estimados e, portanto, sobre a própria acurácia do modelo. Uma solução seria treinar a rede neural um grande número de vezes e reportar a acurácia mediana. Obviamente isto envolve um grande custo operacional.\nO que chama mais atenção nos resultados é a capacidade da rede neural em evitar as projeções mais acentuadas para baixo. Note que em diversos casos isto faz com que a projeção se distancie muito do valor realizado. A princípio, tudo indica que a rede neural foi capaz de aprender a não dar muito peso para o modelo (ou os modelos) com essa tendência de subestimar demais a série em certos momentos. Adicionalmente, a combinação através da rede neural também não superestima demais alguns valores. Em suma, parece que em situações mais usuais ambos os métodos são razoáveis. Porém, na presença de desvios mais acentuados, a rede neural é capaz de entregar resultados mais próximos do observado. Essa é uma virtude importante, sobretudo por se tratar de uma série que mede volatilidade e, portanto, apresenta regiões mais \u0026ldquo;nervosas\u0026rdquo;. Neste caso, é importante que o modelo não perca a mão quando esse momento aparecer.\nPor fim, uma possível estratégia para melhorar o método de combinação linear ou de mediana seria remover aquele modelo com desempenho muito ruim \u0026ndash; no nosso caso, o CES. Uma generalização desse processo seria estimar diversos (ou todos) subconjuntos de modelos, calcular a acurácia da combinação de cada subconjunto e selecionar aquele com melhor poder preditivo. Talvez possamos abordar isso numa próxima oportunidade.\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1565308800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567978998,"objectID":"cecc546a2ebf9f9b56cbdbe1bc828ab8","permalink":"/post/utilizando-redes-neurais-para-combinar-modelos/","publishdate":"2019-08-09T00:00:00Z","relpermalink":"/post/utilizando-redes-neurais-para-combinar-modelos/","section":"post","summary":"No post \u0026ldquo;Combinando modelos de previsão\u0026rdquo;, apresentei duas formas simples de combinar modelos de previsão. A primeira delas envolvia obter uma combinação linear das previsões individuais de cada modelo, através de um método de otimização (OLS, por exemplo, ou equivalente). O segundo método utilizava a mediana das projeções dos modelos individuais. Embora operacionalmente mais simples, esta última abordagem performou melhor que a anterior \u0026ndash; um resultado nada surpreendente, pois existe literatura mostrando que é mesmo difícil obter resultados melhores que a combinação por mediana daqueles modelos empregados.","tags":["Previsão","Redes neurais","combinação","vix"],"title":"Utilizando redes neurais para combinar modelos","type":"post"},{"authors":[],"categories":["Previsão"],"content":"No post anterior, tratei de estratégias para combinar modelos de previsão a fim de obter melhores resultados. Melhor resultado, naquele contexto, significava apresentar menor Root mean square forecast error (RMSFE).É muito comum \u0026ndash; tanto na literatura como na prática \u0026ndash; utilizar esta medida ou outras semelhantes que envolvam médias dos desvios quadráticos ou absolutos dos erros, por exemplo MSE, MSPE, MASE, MAPE, etc. Sabe-se, contudo, que médias são muito sensíveis a valores extremos. Portanto, um único valor extremo no conjunto de erros de previsão é capaz de elevar de maneira significativa aquelas estatísticas. Dito de outra forma, um modelo relativamente bom pode ser descartado porque apresentou uma única previsão ruim. Por esta razão, ganhou popularidade medidas que substituem a média pela mediana naquelas estatísticas anteriores. Os interessados em entender melhor as características destas medidas podem recorrer ao artigo de Hyndman e Koehler (2006): \u0026ldquo;Another look at measures of forecast accuracy\u0026rdquo;.\nNeste ponto, eu gostaria de chamar atenção para uma coisa muito importante: a estatística de acurácia utilizada para ranquear modelos é uma função-perda e, como tal, reflete o objetivo que se pretende alcançar.Se o objetivo é reter o modelo que, em geral, não apresenta previsões muito distantes das realizações, as medidas consideradas até agora são razoáveis. Por outro lado, imagine que a previsão seja para o estoque de uma empresa ou para uma variável que define uma posição de investimento. Nestes casos, o risco da previsão importa.Em outras palavras, pode não fazer muito sentido escolher um modelo que, apesar de ter bom desempenho na média/mediana, apresenta maiores chances de valores extremos. No caso da empresa, tanto o excesso quanto a falta de estoque em níveis elevados pode comprometer as operações; igualmente catastrófico pode ser a realização muito abaixo/acima do previsto para uma variável-chave para o investidor. Para usar um exemplo real, vamos considerar a mesma variável utilizada no post anterior: o núcleo do IPCA EX-3. A amostra vai de julho de 2006 a maio de 2019 e contém 155 observações. Os modelos utilizados foram ARIMA, ETS, CES e DOTM \u0026ndash; todos vistos naquela ocasião \u0026ndash; e os erros de previsão um passo à frente computados a partir de validação-cruzada com uma janela móvel de 60 observações \u0026ndash; o que totalizou cerca de 95 pontos de erro para cada modelo. As densidades dos erros de previsão para cada modelo são apresentadas abaixo: De modo geral, todas as distribuições apresentam maior ocorrência em torno do zero, o que sugere que medidas que computam a tendência central devem ter desempenho mais ou menos parecido. Porém, cabe notar que a cauda das distribuições têm formatos bem diferentes: os erros do modelo ETS têm a cauda da direita maior que a do modelo DOTM e CES, por exemplo. É justamente neste aspecto que reside a ideia de risco: a probabilidade de eventos extremos é maior ou menor de acordo com a área destas caudas. Para traduzir isso de forma mais objetiva, o gráfico abaixo traz três medidas: duas de tendência central \u0026ndash; Root mean square forecast error (RMSFE) e Root median square forecast error (RMedSFE) \u0026ndash; e uma de risco: os limites da área com probabilidade de 10% à direita e à esquerda \u0026ndash; esta última em valor absoluto para ficar mais fácil de visualizar com as demais.\nO primeiro ponto a notar é que existe diferença na classificação quando consideramos a média ou a mediana. Pelo RMSFE, a escolha seria pelo DOTM, ao passo que pelo RMedSFE o modelo escolhido seria o CES. Por outro lado, se quiséssemos reduzir as chances de valores extremos \u0026ndash; tanto para cima quanto para baixo \u0026ndash; o DOTM seria a escolha inequívoca. Fica claro, portanto, a relevância de utilizar medidas aderentes aos objetivos da previsão. Adicionalmente, é sempre uma boa ideia comparar medidas alternativas para cada objetivo.\nPor fim, uma questão interessante que se coloca é: não é possível ter uma única medida capaz de sumarizar tanto a acurácia como o risco em um modelo de previsão? A resposta parece ser positiva. No artigo Tales from tails: On the empirical distributions of forecasting errors and their implication to risk, os autores propõem uma medida chamada Risk measure (RM). A ideia é relativamente simples: aplica-se uma transformação do tipo Box-Cox sobre a distribuição dos erros de previsão a fim de normalizá-los e em seguida calcula-se a medida que é a soma da média com o desvio-padrão da distribuição transformada. Ao fim, a transformação é revertida. A tabela abaixo computa uma versão da medida RM para os erros de previsão dos modelos (transformados via Box-Cox) em conjunto com o p-valor associado ao teste Shapiro de normalidade.\n   modelo MAE SD RM shapiro_bc     dotm 0.94 0.11 2.03 0.02   ces 1.31 0.26 2.79 0.93   arima 1.41 0.32 3.09 0.06   ets 3.02 1.23 13.48 0.00    O problema é que nem sempre a distribuição transformada é normal. O modelo DOTM apresentou a menor RM, porém os resultados não são significativos uma vez que somente a distribuição dos erros do modelo CES \u0026ndash; e com alguma \u0026ldquo;boa vontade\u0026rdquo; a do ARIMA \u0026ndash; se aproximou de uma distribuição normal. De fato, em termos de p-valor, a distribuição original dos erros apresentou resultados melhores para o teste de normalidade: respectivamente 0.14, 0.15, 0.11 e 0.02. Ainda assim, o ideal seria ter p-valores maiores para dar mais segurança.\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1564358400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567980991,"objectID":"bc1593dcdd3ea99861b3489e98a9725c","permalink":"/post/tales-from-tails-analisando-o-risco-em-previsoes/","publishdate":"2019-07-29T00:00:00Z","relpermalink":"/post/tales-from-tails-analisando-o-risco-em-previsoes/","section":"post","summary":"No post anterior, tratei de estratégias para combinar modelos de previsão a fim de obter melhores resultados. Melhor resultado, naquele contexto, significava apresentar menor Root mean square forecast error (RMSFE).É muito comum \u0026ndash; tanto na literatura como na prática \u0026ndash; utilizar esta medida ou outras semelhantes que envolvam médias dos desvios quadráticos ou absolutos dos erros, por exemplo MSE, MSPE, MASE, MAPE, etc. Sabe-se, contudo, que médias são muito sensíveis a valores extremos.","tags":["Previsão","risco","distribuição","risk measure"],"title":"Tales from tails: analisando o risco em previsões","type":"post"},{"authors":[],"categories":["Previsão"],"content":"Em posts anteriores apresentei algumas metodologias capazes de melhorar previsões. Em particular, falei um pouco sobre bagging — uma técnica que estima um modelo específico sobre variações da série original e, em seguida, computa a média/mediana destas previsões (ver aqui) — e sobre rectify — uma abordagem que considera eventuais informações contidas nos erros de previsão (ver aqui). Em todos os casos considerei apenas um único modelo para realizar as previsões. Porém, com frequência temos à disposição mais de um modelo para a mesma variável. Neste caso, o que fazer?\nUma estratégia muito comum consiste em combinar previsões de diversos modelos. Isso não é novidade e vem sendo explorado desde o paper seminal de Bates e Granger em 1969, “The combination of forecasts“, com resultados bastante promissores. Entretanto, a estratégia parece ter definido um novo padrão no campo de previsões uma vez que 12 dos 17 modelos mais acurados na competição M4 foram combinações. Isto se deve, em grande medida, ao menor risco de repousar exclusivamente em um modelo mal especificado ou com baixa capacidade de adaptação a novos eventos.\nExistem diversas estratégias para combinar previsões. As abordagens mais comuns utilizam alguma medida como média simples/mediana ou fazem uso de alguma combinação linear das previsões, conforme a expressão abaixo:\n\\[ y^{FC}_{t} = \\alpha_1 y_{1,t}^{FC} + \\alpha_2 y_{2,t}^{FC} + ... + \\alpha_k y_{k,t}^{FC} = \\sum_i^k \\alpha_i y_{i,t}^{FC} \\]\nem que $y_{i,t}^{FC}$ é a previsão do modelo $i$ para o período $t$.\nOs pesos, $\\alpha_i$, podem ser definidos de diversas formas. Em geral, considera-se alguma medida do erro de previsão de cada modelo, dando menor peso ao modelo que historicamente errou mais; ou então obtém-se os pesos através da minimização de alguma função perda (RMSFE, MSFE, etc). Métodos mais sofisticados permitem, por exemplo, mudanças no valor dos parâmetros ao longo do tempo e até mesmo a utilização de algoritmos de Machine Learning para aprender o valor destes parâmetros.\nNeste post, vou considerar quatro modelos univariados: ETS, CES (complex exponential smoothing), ARIMA e DOTM (dynamic optimised theta). A primeira abordagem para combinação será computar a mediana das projeções individuais. A escolha conjunta destes modelos e da mediana para combinação não é arbitrária, mas segue a proposta de Petropoulos e Svetunkov (2019, IJF), a qual, embora simples, obteve excelentes resultados. A segunda abordagem para combinação considera os mesmos modelos e pesos $\\alpha_i$ que minimizam o RMSFE (root mean squared forecast error), de acordo com:\n\\[ min_{\\alpha_i} \\frac{\\sum_{t = 1}^{T} ( y_t - \\sum_i^{k} \\alpha_i y_{i,t}^{FC} )^2}{n} \\]\nOs leitores mais familiarizados vão notar que este problema pode ser reduzido à uma regressão linear entre o y observado em $t$ e as projeções de cada um dos modelos para o mesmo $t$. Em especial, ao elevar ao quadrado os resíduos da regressão, calcular a média e extrair a raiz, obteremos o RMSFE. Entretanto, para deixar o tratamento mais geral, vou considerar o problema de otimização acima. Adicionalmente, para que os coeficientes $\\alpha_i$ sejam não-negativos e somem um, vou aplicar uma transformação sobre eles utilizando a função softmax. O objetivo é deixar mais intuitiva a noção de pesos. Portanto, os coeficientes $\\alpha_i$ padronizados serão dados por:\n\\[ \\bar{\\alpha_i} = \\frac{e^{\\alpha_i}}{\\sum_i^k e^{\\alpha_i}} \\]\nPor fim, vamos comparar os resultados dos modelos individuais com aqueles obtidos através das combinações. Antes de começarmos, é preciso chamar atenção para três pontos. Em primeiro lugar, como quase tudo em forecasting, as evidências que apontam vantagem de previsões combinadas sobre as individuais são obtidas ao aplicar o método sobre um grande conjunto de séries. Ou seja, a superioridade dos métodos de combinação vale na média e não necessariamente para todos os casos particulares.\nEm segundo lugar, a combinação de modelos pressupõe que os modelos gerem previsões não-viesadas. Caso contrário, o viés de um dos modelos acaba contaminando a previsão combinada. Por esta razão, incluir uma constante no problema de otimização pode melhorar o resultado, uma vez que captura algum eventual viés.\nPor último, é preciso ter cuidado ao avaliar o poder preditivo dos modelos. No caso da combinação linear, como precisamos gerar previsões para calcular o valor dos pesos $\\alpha_i$, vamos separar uma parte da amostra para validação. Para ficar mais claro, faremos o seguinte:\n A amostra de treino será utilizada para computar as projeções de cada método; O peso de cada método será computado tendo como referência o poder preditivo sobre a amostra de validação; Os pesos obtidos na etapa 2 serão utilizados para combinar as projeções obtidas na amostra de treino ampliada (treino+validação). Estas projeções da etapa 3 serão comparadas com os valores da amostra de teste.  Entendido o exercício, abra o R e acompanhe!\nPasso 1: carregar os pacotes necessários, importar os dados e definir as amostras. Para esta aplicação, vamos utilizar a série do núcleo do IPCA EX-3, calculado pelo BCB (SGS 27839).\n# 1. Carregar bibliotecas library(tidyverse) library(rbcb) # Para instalar: devtools::install_github(\u0026quot;wilsonfreitas/rbcb\u0026quot;) library(forecast) library(smooth) library(forecTheta) library(knitr) # 2. Importar dados dados dados \u0026lt;- rbcb::get_series(list(\u0026quot;ipca_ex3\u0026quot; = 27839), start_date = \u0026quot;2006-07-01\u0026quot;, end_date = \u0026quot;2019-05-01\u0026quot;) dados_ts \u0026lt;- ts(dados$ipca_ex3, start = c(2006,7), freq = 12) # 3. Separar as amostras (cerca de 55% para treino, 30% para validação e 15% para teste) dados_treino \u0026lt;- window(dados_ts, end = c(2013,7)) dados_valida \u0026lt;- window(dados_ts, start = c(2013,8), end = c(2017,5)) dados_teste \u0026lt;- window(dados_ts, start = c(2017,6))  Passo 2: realizar as projeções individuais para cada modelo com horizonte igual ao período de validação. Estes dados serão utilizados para estimar os pesos.\nmodelo_i \u0026lt;- list( \u0026quot;ets\u0026quot; = function(x,h) forecast(ets(x, lambda = \u0026quot;auto\u0026quot;), h = h), \u0026quot;ces\u0026quot; = function(x,h) forecast(smooth::auto.ces(x), h = h), \u0026quot;arima\u0026quot; = function(x,h) forecast(auto.arima(x), h = h), \u0026quot;dotm\u0026quot; = function(x,h) forecTheta::dotm(x, h = h) ) fc_i \u0026lt;- purrr::invoke_map(.f = modelo_i, .x = list(dados_treino), h = length(dados_valida)) fc_i_mean \u0026lt;- purrr::map_dfc(.x = fc_i, .f = function(x) x[[\u0026quot;mean\u0026quot;]]) %\u0026gt;% dplyr::mutate(y_valida = dados_valida)  Passo 3: computar os parâmetros que minimizam a RMSFE e normalizá-los. Aqui, como eram apenas 4 modelos eu abri o somatório para ficar mais claro. Para o caso de um conjunto grande de modelos, o ideal é substituir por uma operação matricial.\nmsfe_comb \u0026lt;- function(x){ alpha_ets \u0026lt;- x[1] alpha_ces \u0026lt;- x[2] alpha_arima \u0026lt;- x[3] alpha_dotm \u0026lt;- x[4] ((fc_i_mean$y_valida - alpha_ets*fc_i_mean$ets - alpha_ces*fc_i_mean$ces - alpha_arima*fc_i_mean$arima - alpha_dotm*fc_i_mean$dotm)^2) %\u0026gt;% mean() %\u0026gt;% sqrt() } pesos \u0026lt;- optim(c(1,1,1,1), msfe_comb) pesos_norm \u0026lt;- round(exp(pesos$par)/sum(exp(pesos$par)), 3)  Passo 4: realizar as projeções combinadas utilizando os parâmetros estimados e a mediana. Em seguida, comparar com as realizações da amostra de teste.\ndados_treino_amplo \u0026lt;- window(dados_ts, end = c(2017,5)) fc_i_amplo \u0026lt;- purrr::invoke_map(.f = modelo_i, .x = list(dados_treino_amplo), h = length(dados_teste)) fc_i_mean_amplo \u0026lt;- purrr::map_dfc(.x = fc_i_amplo, .f = function(x) x[[\u0026quot;mean\u0026quot;]]) %\u0026gt;% dplyr::mutate(\u0026quot;y_teste\u0026quot; = dados_teste) %\u0026gt;% dplyr::rowwise() %\u0026gt;% dplyr::mutate(\u0026quot;Mediana\u0026quot; = median(c(ets,ces,arima,dotm))) %\u0026gt;% dplyr::ungroup() %\u0026gt;% dplyr::mutate(\u0026quot;Otimização\u0026quot; = pesos_norm[1]*ets + pesos_norm[2]*ces + pesos_norm[3]*arima + pesos_norm[4]*dotm) fc_i_acc \u0026lt;- fc_i_mean_amplo %\u0026gt;% dplyr::summarise_at(vars(-y_teste), funs(forecast::accuracy(., y_teste)[, \u0026quot;RMSE\u0026quot;]))  As medidas de acurácia são exibidas na tabela abaixo. A estratégia de combinação através da mediana apresentou o melhor resultado, superando ligeiramente os modelos CES e ETS. A combinação através de otimização, por sua vez, não foi capaz de bater todos os modelos individuais. Mais especificamente, o bom desempenho do modelo arima no período de validação fez com que este recebesse um peso mais elevado. Entretanto, essa vantagem não se materializou no período de teste. Isto reforça a necessidade de reavaliar modelos e estratégias de tempos em tempos, sobretudo quando ocorrem mudanças estruturais na série de interesse -- como foi o caso do IPCA EX-3. Por outro lado, também reforça a capacidade de estratégias que utilizam medidas de tendência menos sensíveis a extremos -- como a mediana -- em responder melhor a ambientes mais incertos.\n   Modelo RMSFE     Mediana 0.121   ces 0.123   ets 0.123   dotm 0.131   Otimização 0.143   arima 0.184    O gráfico abaixo apresenta as observações para o IPCA EX-3 da amostra de teste e as previsões pontuais geradas pelos dois métodos de combinação. Vale ressaltar que uma análise mais rigorosa levaria em conta também a performance para cada horizonte. Também fica claro ao observar o gráfico que os picos e vales mais pronunciados podem ter um papel relevante sobre a magnitude da medida RMSFE. Uma boa prática seria considerar medidas alternativas, sobretudo aquelas mais robustas a este tipo de situação. Pretendo abordar isso em algum momento.\nPor fim, cabe notar que intervalo de confiança nesses casos não é trivial, uma vez que é preciso obter uma expressão para a variância da combinação das previsões, o que requer computar as covariâncias entre os erros dos modelos. Uma solução conservadora é utilizar o intervalo mais amplo dos modelos individuais, porém não me agrada muito. Talvez possamos voltar nesse ponto em uma próxima oportunidade.\nSugestão: Para os interessados em aplicar metodologias de combinação de previsões, existem alguns pacotes disponíveis para R. Dois deles (opera e ForecastHybrid) são tratados neste post do Rob. Hyndman: https://robjhyndman.com/hyndsight/forecast-combinations/\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1562803200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567981614,"objectID":"860545ed8aafc7782f851d97451dbfac","permalink":"/post/combinando-modelos-de-previsao/","publishdate":"2019-07-11T00:00:00Z","relpermalink":"/post/combinando-modelos-de-previsao/","section":"post","summary":"Em posts anteriores apresentei algumas metodologias capazes de melhorar previsões. Em particular, falei um pouco sobre bagging — uma técnica que estima um modelo específico sobre variações da série original e, em seguida, computa a média/mediana destas previsões (ver aqui) — e sobre rectify — uma abordagem que considera eventuais informações contidas nos erros de previsão (ver aqui). Em todos os casos considerei apenas um único modelo para realizar as previsões.","tags":["combinação","Previsão","otimização"],"title":"Combinando modelos de previsão","type":"post"},{"authors":[],"categories":["Previsão"],"content":"O exercício de hoje tem como objetivo apresentar uma técnica com potencial para aprimorar a previsão pontual de uma série, conhecida como bagging (bootstrap aggregating).\nPartindo do pressuposto de que toda série temporal é uma realização específica de um processo estocástico, o que este método faz é gerar outras possíveis realizações (séries) deste mesmo processo gerador. E como isso é feito?\nEm primeiro lugar, a série original é decomposta em tendência, sazonalidade e restante (pense neste último termo como a parte aleatória da série). Este termo restante é submetido a um processo de bootstrap, isto é, ele sofre um processo de re-amostragem. Todavia, como o termo aleatório de uma série temporal pode ser correlacionado no tempo, esta re-amostragem não é feita por observações, mas em blocos — blocked bootstrap. Por fim, estes novos componentes aleatórios obtidos via bootstrap são reintroduzidos aos componentes de tendência e sazonalidade da série original formando novas séries que são variantes dela.\nPara ficar mais claro, considere o gráfico abaixo. A linha preta é a série original da taxa de desocupação medida pela Pnad Contínua Mensal (IBGE). As linhas coloridas são séries calculadas a partir do processo descrito acima. Do ponto de vista estatístico, qualquer uma daquelas séries poderia ter ocorrido, sendo a série “verdadeira” aquela que efetivamente ocorreu.\nOk, entendido até aqui. E agora? Agora, o método consiste em obter as previsões para cada uma das séries e calcular a média das previsões. Você pode estar se perguntando se, de fato, este método melhora o poder preditivo de um modelo. Existem trabalhos que mostram aumento de performance, na média, para alguns modelos. De todo modo, é aconselhável checar se o mesmo é válido para a série e para o modelo que estamos utilizando. Vamos fazer um exemplo?\nAntes de começarmos, uma breve explicação. Utilizaremos a função bld.mbb.bootstrap() do pacote forecast para calcular as séries via bootstrap, conforme o gráfico acima. O resultado será um objeto do tipo lista com as séries geradas. Em seguida, vamos utilizar a função map() do pacote purrr para gerar previsões para cada uma das séries através do auto.arima(), também do pacote forecast. Mas lembre-se que você pode utilizar qualquer modelo que desejar. O pacote forecast tem uma implementação direta através da função baggedModel(), mas eu preferi desagregar o trabalho para deixar mais claro como é feito. Por fim, vamos comparar os erros de previsão (fora da amostra) da série original e da média das séries geradas (bagging).\nPasso 1: carregar pacotes necessários\nlibrary(sidrar) library(tidyverse) library(forecast) library(timetk)  Passo 2: importar a série temporal da PNAD\npnad \u0026lt;- sidrar::get_sidra(api = \u0026quot;/t/6381/n1/all/v/4099/p/all/d/v4099%201\u0026quot;) pnad_ts \u0026lt;- ts(pnad$Valor, start = c(2012,3), freq = 12)  Passo 3: definir amostras de treino e de teste para medir a acurácia das previsões e também o número de séries geradas por bootstrap\npnad_treino \u0026lt;- window(pnad_ts, end = c(2016,7)) pnad_teste \u0026lt;- window(pnad_ts, start = c(2016,8)) k \u0026lt;- 10  Passo 4: computar as séries via bootstrap\npnad_boot \u0026lt;- forecast::bld.mbb.bootstrap(pnad_treino, k) %\u0026gt;% purrr::map(.f = ts, start = c(2012,3), freq = 12)  Passo 5: computar previsões por auto.arima, por bagging\naa_fc \u0026lt;- function(x){forecast(auto.arima(x, max.d = 1), n = 24)[[\u0026quot;mean\u0026quot;]]} pnad_boot_fc \u0026lt;- purrr::map(.x = pnad_boot, .f = aa_fc) ## Computar a previsão pelo método bagging fc_original \u0026lt;- pnad_boot_fc[[1]] fc_bagged \u0026lt;- pnad_boot_fc %\u0026gt;% purrr::reduce(`+`) %\u0026gt;% `/`(k)  Passo 6: comparar a acurácia dos modelos\naccuracy(fc_original, pnad_teste)  ## ME RMSE MAE MPE MAPE ACF1 Theil's U ## Test set -2.362092 3.129262 2.363582 -18.89847 18.9103 0.8906952 10.3499  accuracy(fc_bagged, pnad_teste)  ## ME RMSE MAE MPE MAPE ACF1 ## Test set -1.947639 2.682957 2.013009 -15.56498 16.10364 0.8898631 ## Theil's U ## Test set 8.86905  De fato, como é possível observar, as previsões a partir do método bagging apresentaram desempenho superior.\nOs códigos dos exercícios encontram-se disponíveis no repositório do blog no github.\nAviso legal: Todo o conteúdo desta página é de responsabilidade pessoal do autor e não expressa a visão da instituição a qual o autor tem vínculo profissional.\n","date":1536796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567982589,"objectID":"8d0f09310933df02f103269197ac7015","permalink":"/post/como-aprimorar-previsoes-uma-aplicacao-com-bootstrap/","publishdate":"2018-09-13T00:00:00Z","relpermalink":"/post/como-aprimorar-previsoes-uma-aplicacao-com-bootstrap/","section":"post","summary":"O exercício de hoje tem como objetivo apresentar uma técnica com potencial para aprimorar a previsão pontual de uma série, conhecida como bagging (bootstrap aggregating).\nPartindo do pressuposto de que toda série temporal é uma realização específica de um processo estocástico, o que este método faz é gerar outras possíveis realizações (séries) deste mesmo processo gerador. E como isso é feito?\nEm primeiro lugar, a série original é decomposta em tendência, sazonalidade e restante (pense neste último termo como a parte aleatória da série).","tags":["Previsão","bagging","bootstrap"],"title":"Como aprimorar previsões: uma aplicação com bootstrap","type":"post"}]